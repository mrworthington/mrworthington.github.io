<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dh 2.0 on Matt Worthington</title>
    <link>/tags/dh-2.0/</link>
    <description>A blog about early modern history and digital humanities</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 07 Feb 2018 18:51:26 -0800</lastBuildDate>
    
        <atom:link href="/tags/dh-2.0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to GIS with R</title>
      <link>/2018/02/07/introduction-to-gis-with-r/</link>
      <pubDate>Wed, 07 Feb 2018 18:51:26 -0800</pubDate>
      
      <guid>/2018/02/07/introduction-to-gis-with-r/</guid>
      <description>&lt;p&gt;The geographic visualization of data makes up one of the major branches of the Digital Humanities toolkit. There are a plethora of tools that can visualize geographic information from full-scale GIS applications such as &lt;a href=&#34;https://www.esri.com&#34;&gt;ArcGIS&lt;/a&gt; and &lt;a href=&#34;https://qgis.org&#34;&gt;QGIS&lt;/a&gt; to web-based tools like &lt;a href=&#34;http://maps.google.com&#34;&gt;Google maps&lt;/a&gt; to any number of programing languages. There are advantages and disadvantages to these different types of tools. Using a command-line interface &lt;a href=&#34;https://jessesadler.com/post/excel-vs-r/&#34;&gt;has a steep learning curve&lt;/a&gt;, but it has the benefit of enabling approaches to analysis and visualization that are customizable, transparent, and reproducible.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; My own interest in coding and &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt; began with my desire to dip my toes into &lt;a href=&#34;https://en.wikipedia.org/wiki/Geographic_information_system&#34;&gt;geographic information systems (GIS)&lt;/a&gt; and create maps of an early modern correspondence network. The goal of this post is to introduce the basic landscape of working with spatial data in R from the perspective of a non-specialist. Since the early 2000s, an active community of R developers has built a wide variety of packages to enable R to interface with geographic data. The extent of the geographic capabilities of R is readily apparent from the many packages listed in the &lt;a href=&#34;https://cran.r-project.org/web/views/Spatial.html&#34;&gt;CRAN task view for spatial data&lt;/a&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;In my previous post on &lt;a href=&#34;https://jessesadler.com/post/geocoding-with-r/&#34;&gt;geocoding with R&lt;/a&gt; I showed the use of the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggmap/index.html&#34;&gt;&lt;code&gt;ggmap&lt;/code&gt;&lt;/a&gt; package to geocode data and create maps using the &lt;a href=&#34;http://ggplot2.tidyverse.org&#34;&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt; system. This post will build off of the location data obtained there to introduce the two main R packages that have standardized the use of spatial data in R. The&lt;a href=&#34;https://cran.r-project.org/web/packages/sp/index.html&#34;&gt;&lt;code&gt;sp&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/index.html&#34;&gt;&lt;code&gt;sf&lt;/code&gt;&lt;/a&gt; packages use different methodologies for integrating spatial data into R. The &lt;code&gt;sp&lt;/code&gt; package introduced a coherent set of classes and methods for handling spatial data in 2005.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; The package remains the backbone of many packages that provide GIS capabilities in R. The &lt;code&gt;sf&lt;/code&gt; package implements the &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/vignettes/sf1.html&#34;&gt;simple features&lt;/a&gt; open standard for the representation of geographic vector data in R. The package first appeared on &lt;a href=&#34;http://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt; at the end of 2016 and is under very active development. The &lt;code&gt;sf&lt;/code&gt; package is &lt;a href=&#34;https://www.r-consortium.org/blog/2017/01/03/simple-features-now-on-cran&#34;&gt;meant to supersede &lt;code&gt;sp&lt;/code&gt;&lt;/a&gt;, implementing ways to store spatial data in R that &lt;a href=&#34;https://edzer.github.io/UseR2017/&#34; title=&#34;Edzer Pebesma, Spatial Data in R: New Directions&#34;&gt;integrate with the tidyverse workflow&lt;/a&gt; of the &lt;a href=&#34;http://tidyverse.org&#34;&gt;packages developed by Hadley Wickham and others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a number of good resources on working with spatial data in R. The best sources for information about the &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; packages that I have found are Roger Bivand, Edzer Pebesma, and Virgilio GÃ³mez-Rubio, &lt;em&gt;Applied Spatial Data Analysis with R&lt;/em&gt; (2013) and the working book &lt;a href=&#34;https://geocompr.robinlovelace.net&#34;&gt;Robin Lovelace, Jakub Nowosad, Jannes Muenchow, &lt;em&gt;Geocomputation with R&lt;/em&gt;&lt;/a&gt;, which concentrate on &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; respectively. The &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/&#34;&gt;vignettes&lt;/a&gt; for &lt;code&gt;sf&lt;/code&gt; are also very helpful. The perspective that I adopt in this post is slightly different from these resources. In addition to more explicitly comparing &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt;, this post approaches the two packages from the starting point of working with geocoded data with longitude and latitude values that must be transformed into spatial data. It takes the point of view of someone getting into GIS and does not assume that you are working with data that is already in a spatial format. In other words, this post provides information that I wish I knew as I learned to work with spatial data in R. Therefore, I begin the post with a general overview of spatial data and how &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; implement the representation of spatial data in R. The second half of the post uses an example of mapping the locations of letters sent to a Dutch merchant in 1585 to show how to create, work with, and plot &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; objects. I highlight the differences between the two packages and ultimately discuss some reasons why the R spatial community is moving towards the use of the &lt;code&gt;sf&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;crs&#34;&gt;Spatial data and coordinate reference systems&lt;/h2&gt;

&lt;p&gt;The distinguishing feature of spatial data is that it represents actual locations on Earth. To represent the geographic placement of an object you need two pieces of information: the coordinates of the object and a system of reference for how the coordinates relate to a physical location on Earth. The non-spherical shape of the Earth, which bulges at the equator, complicates the creation and use of a coordinate reference system or CRS and plethora of complex models have been created in attempts to accurately represent the Earth&amp;rsquo;s surface. A CRS consists of one such ellipsoid or geometric model of the shape of the Earth and a datum, which identifies the origin and orientation of the coordinate axes on the ellipsoid, as well as the units of measurement.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; There are two types of CRSs: geographic and projected. Geographic reference systems represent points on an globe, using units of degrees longitude and latitude that correspond to angles measured from the center of the Earth as calculated using the given ellipsoid. A projected reference system uses a geometric model to project a 3-dimensional ellipsoid onto a 2-dimensional plane. A projection is necessary to create any 2-dimensional map, but it &lt;a href=&#34;https://www.vox.com/world/2016/12/2/13817712/map-projection-mercator-globe&#34;&gt;results in the distortion&lt;/a&gt; of aspects of the Earth&amp;rsquo;s surface such as &lt;a href=&#34;http://axismaps.github.io/thematic-cartography/articles/projections.html&#34;&gt;area, direction, distance, and shape&lt;/a&gt;. Despite the necessary distortion, projected reference systems are useful for geographic analysis, because they use linear units of measurement such as meters instead of degrees.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Between the variety of ellipsoidal models, the vast array of global and local datums, and the various kinds of projections, there are innumerable CRSs to choose from. The &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; packages implement two different ways to identify a specific CRS and to transform objects from one CRS to another: the &lt;a href=&#34;http://proj4.org&#34;&gt;PROJ library&lt;/a&gt; and &lt;a href=&#34;http://www.epsg.org&#34;&gt;EPSG codes&lt;/a&gt;. The PROJ library uses an identification system of &lt;code&gt;+parameter=value&lt;/code&gt; to define a CRS. The library uses a &lt;a href=&#34;http://proj4.org/parameters.html#parameter-list&#34;&gt;wide range of parameters&lt;/a&gt; to specify a CRS, but the most important are &lt;code&gt;+proj&lt;/code&gt; and &lt;code&gt;+datum&lt;/code&gt; for the projection and datum to be used. The PROJ parameters provides the basis for how &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; identify CRSs, but CRSs can also be identified through EPSG codes.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; The EPSG library supplies codes for well-known CRSs, and thus provides an easier method to identify a subset of the CRSs available through the PROJ library. You can access a data frame of over 5,000 EPSG codes available in R through the &lt;a href=&#34;https://cran.r-project.org/web/packages/rgdal/index.html&#34;&gt;&lt;code&gt;rgdal&lt;/code&gt;&lt;/a&gt; package with the command &lt;code&gt;rgdal::make_EPSG()&lt;/code&gt;. If you plan to deal with spatial data on a regular basis it is probably worth being familiar with widely used EPSG code such as 4326, which is geographic reference system that uses units of longitude and latitude on the &lt;a href=&#34;https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84&#34;&gt;Â World Geodetic System 1984 (WGS84) ellipsoid&lt;/a&gt;. Two useful resources for looking up and obtaining information about specific EPSG codes are &lt;a href=&#34;https://epsg.io&#34;&gt;EPSG.io&lt;/a&gt; and &lt;a href=&#34;http://spatialreference.org&#34;&gt;SpatialReference.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Spatial data with a defined CRS can represent either vector or raster data. Vector data is based on points â which can be connected to form lines and polygons â that are located within a coordinate reference system. Raster data, on the other hand, consists of values within a grid system. For example, a road map is a vector data and a map using satellite imagery is raster data made up of pixels on a grid. &lt;code&gt;sp&lt;/code&gt; has capabilities to work with both vector and raster data, while &lt;code&gt;sf&lt;/code&gt; and the simple features standard on which it is based only deals with vector data. This post will only discuss vector data, which is more widely used in the Humanities and Social Sciences.&lt;/p&gt;

&lt;h2 id=&#34;overview-spsf&#34;&gt;Overview of the &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; packages&lt;/h2&gt;

&lt;p&gt;The complexity that comes with the identification and translation between the thousands of different coordinate reference systems makes it impossible for standard R objects such as data frames to properly represent spatial data. In addition, the best way to represent coordinates â in one or two columns â and the representation of more complex objects such as lines and polygons create problems for how to store spatial data. These shortcomings can be seen with geocoded data that contains longitude and latitude values in a data frame like that I created in &lt;a href=&#34;https://jessesadler.com/post/geocoding-with-r/&#34;&gt;geocoding with R&lt;/a&gt;. Most geocoded data created through &lt;a href=&#34;https://gis.stackexchange.com/questions/48949/epsg-3857-or-4326-for-googlemaps-openstreetmap-and-leaflet&#34;&gt;Google Maps or other geocoding sitesÂ &lt;/a&gt; provides coordinates in longitude and latitude values using the WGS84 ellipsoid and thus contains a CRS equivalent to the PROJ argument &lt;code&gt;+proj=longlat +datum=WGS84&lt;/code&gt; or EPSG 4326. However, this information about the CRS is implicit and not contained anywhere within the data frame itself.&lt;/p&gt;

&lt;p&gt;Due to the inadequacies of normal data frame objects to represent the variety of features of spatial data, the &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; packages both define their own classes of objects to store spatial data. From a beginner&amp;rsquo;s perspective, the main differences between the &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; packages derive from the manner by which &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; classes store information about CRS, distinguish between points, lines, and polygons, and how they connect this spatial data to non-spatial data stored in a data frame.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sp&lt;/code&gt; package uses what are known as &lt;a href=&#34;https://bookdown.org/rdpeng/RProgDA/object-oriented-programming.html#s4&#34;&gt;S4&lt;/a&gt; classes in R to represent spatial data. S4 objects are made up of &lt;strong&gt;slots&lt;/strong&gt; that store different types of well-defined data. The slots can be accessed with the &lt;code&gt;@&lt;/code&gt; symbol in the form of &lt;code&gt;object@slot&lt;/code&gt;. The foundational &lt;code&gt;sp&lt;/code&gt; class is the &lt;code&gt;Spatial&lt;/code&gt; class, which has ten subclasses differentiated by the slots they contain. To get a better idea of what this all looks like, we can use the &lt;code&gt;getClass()&lt;/code&gt; function, but first we have to load the &lt;code&gt;sp&lt;/code&gt; package.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Load the sp package&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sp&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Spatial classes&lt;/span&gt;
getClass&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Spatial&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Spatial&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; 
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Slots&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;                               
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;         &lt;span class=&#34;nx&#34;&gt;bbox&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proj4string&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;         &lt;span class=&#34;nx&#34;&gt;CRS&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; 
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Known&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Subclasses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;directly&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialMultiPoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;directly&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialGrid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;directly&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialLines&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;directly&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPolygons&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;directly&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPointsDataFrame&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPixels&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialMultiPointsDataFrame&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialMultiPoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialGridDataFrame&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialGrid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialLinesDataFrame&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialLines&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPixelsDataFrame&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPolygonsDataFrame&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPolygons&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output lists the different &lt;code&gt;Spatial&lt;/code&gt; classes and shows that the basis for all &lt;code&gt;Spatial&lt;/code&gt; objects is the &lt;code&gt;bbox&lt;/code&gt; and &lt;code&gt;proj4string&lt;/code&gt; slots. The &lt;code&gt;proj4string&lt;/code&gt; provides the CRS for an object through a PROJ definition, while the &lt;code&gt;bbox&lt;/code&gt; slot provides a matrix of the minimum and maximum coordinates for the object. The &lt;code&gt;Spatial&lt;/code&gt; subclasses add slots to the foundational slots of &lt;code&gt;bbox&lt;/code&gt; and &lt;code&gt;proj4string&lt;/code&gt; for the type of geometric data â points, lines, polygons, and grid for raster â and whether the object contains attribute data in the form of a data frame. We can see this from the slots in the &lt;code&gt;SpatialPoints&lt;/code&gt; and the &lt;code&gt;SpatialPointsDataFrame&lt;/code&gt; classes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# slots for SpatialPoints class&lt;/span&gt;
slotNames&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;coords&amp;#34;      &amp;#34;bbox&amp;#34;        &amp;#34;proj4string&amp;#34;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# slots for SpatialPointsDataFrame&lt;/span&gt;
slotNames&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SpatialPointsDataFrame&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;data&amp;#34;        &amp;#34;coords.nrs&amp;#34;  &amp;#34;coords&amp;#34;      &amp;#34;bbox&amp;#34;        &amp;#34;proj4string&amp;#34;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;SpatialPoints&lt;/code&gt; class contains a &lt;code&gt;coords&lt;/code&gt; slot to store the point coordinates. The &lt;code&gt;SpatialPointsDataFrame&lt;/code&gt; class adds a &lt;code&gt;data&lt;/code&gt; slot that enables points to be associated with attribute data in a data frame. The non-spatial data of a &lt;code&gt;Spatial*DataFrame&lt;/code&gt; object can be accessed with &lt;code&gt;@data&lt;/code&gt;. However, these S4-style classes do not fit within the definition of &lt;a href=&#34;http://r4ds.had.co.nz/tidy-data.html&#34;&gt;tidy data&lt;/a&gt; and cannot be manipulated using the &lt;a href=&#34;http://r4ds.had.co.nz/transform.html&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt;&lt;/a&gt; methods I have discussed in previous posts. Instead, all manipulation of the &lt;code&gt;@data&lt;/code&gt; slot is done with base R commands. &lt;code&gt;sp&lt;/code&gt; objects also cannot be plotted with &lt;code&gt;ggplot2&lt;/code&gt;, but need to use the base or trellis plotting systems, though it is possible to force them into a compatible form with the &lt;a href=&#34;https://cran.r-project.org/web/packages/broom/index.html&#34;&gt;&lt;code&gt;broom&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;In contrast to the &lt;code&gt;Spatial&lt;/code&gt; class, the &lt;code&gt;sf&lt;/code&gt; class â yes, the package and class have the same name â is an extension of data frames. Essentially, &lt;code&gt;sf&lt;/code&gt; objects can be treated as data frames that also contain spatial data, as opposed to spatial data that may or may not also contain data frames. This enables &lt;code&gt;sf&lt;/code&gt; objects to fit within the &lt;a href=&#34;http://tidyverse.org&#34;&gt;tidyverse&lt;/a&gt; workflow, making it possible to &lt;a href=&#34;http://strimas.com/r/tidy-sf/&#34;&gt;manipulate them with &lt;code&gt;dplyr&lt;/code&gt; commands&lt;/a&gt;. The &lt;a href=&#34;https://edzer.github.io/UseR2017/&#34;&gt;tidy&lt;/a&gt; nature of &lt;code&gt;sf&lt;/code&gt; objects also means that they can can be &lt;a href=&#34;http://ggplot2.tidyverse.org/reference/ggsf.html&#34;&gt;plotted with &lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;, though currently this capability is only possible with the development version of &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sf&lt;/code&gt; objects consist of rows of features, hence the name simple features, which have both non-spatial and spatial forms of data. The spatial data of an &lt;code&gt;sf&lt;/code&gt; object is contained in a special geometry column that is of class &lt;code&gt;sfc&lt;/code&gt;. The geometry column contains the same basic types of spatial data as the slots in &lt;code&gt;Spatial&lt;/code&gt; objects: the CRS, coordinates, and type of geometric object. The &lt;code&gt;sfc&lt;/code&gt; class has seven subclasses to denote the types of geometric objects within the geometry column, which are derived from the simple features standard. The possible geometric objects are point, linestring, polygon, multipoint, multilinestring, multipolygon, and geometrycollection for any combination of the other types.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;With this basic introduction to spatial data and the &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; packages out of the way, the remainder of the post will demonstrate the creation and visualization of &lt;code&gt;Spatial&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; objects by creating maps of the letters sent to Daniel van der Meulen in 1585. For this example, I want to map the total number of letters sent from and received in each location &lt;a href=&#34;https://www.jessesadler.com/post/geocoding-with-r/#mapping-data&#34;&gt;as I did previously with &lt;code&gt;ggamp&lt;/code&gt;&lt;/a&gt;. This will involve working with spatial data in the form of points, lines, and polygons. The points will represent the sources and destinations of the letters Daniel received and will be plotted on two different kinds of background maps using the &lt;a href=&#34;http://cran.r-project.org/web/packages/rnaturalearth&#34;&gt;&lt;code&gt;rnaturalearth&lt;/code&gt;&lt;/a&gt; package to access coastal (lines) and country (polygons) world maps from the &lt;a href=&#34;http://www.naturalearthdata.com&#34;&gt;Natural Earth&lt;/a&gt; open-source repository of maps. In the process I will show how to make base R maps with &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt; plots with &lt;code&gt;sf&lt;/code&gt; and development version of &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;preparing-data&#34;&gt;Preparing the data&lt;/h2&gt;

&lt;p&gt;The first thing that we need to do is get information about the number of letters sent from and received in each city and join this non-spatial data with the longitude and latitude information that was created in the &lt;a href=&#34;https://jessesadler.com/post/geocoding-with-r/&#34;&gt;geocoding with R&lt;/a&gt; post. This will provide the necessary components to create spatial points object in both &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt;. You can find the data and the R script that goes along with this example on &lt;a href=&#34;https://github.com/jessesadler/intro-to-r&#34;&gt;GitHub&lt;/a&gt;. Let&amp;rsquo;s start by loading the necessary packages and the two files containing data on the letters and the location of the cities in the letters data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Load the packages&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;tidyverse&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sp&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;rnaturalearth&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Load the data&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; read_csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;data/correspondence-data-1585.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
locations &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; read_csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;data/locations.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;letters&lt;/code&gt; data frame contains 114 rows of letters with columns representing the writer, source, destination, and date of each letter. This example will only make use of the source and destination of the letters. The &lt;code&gt;locations&lt;/code&gt; data frame contains columns for the name, longitude, and latitude of the 13 cities found in the letters data. There are a couple of ways that the data can be prepared, but in this case I want the data for the source and destination of the letters to be in a single data frame in order to minimize the objects that we will be dealing with in the post. The goal is to create a data frame with a column for the name of the city, the number of letters, and whether this information refers to letters sent or letters received. This can be done by separately finding the number of letters sent to each location and the number of letters received in each location and then joining the two data frames together.&lt;/p&gt;

&lt;p&gt;We can get the number of letters sent from and received in each location by grouping the data by source or destination and using either &lt;code&gt;count()&lt;/code&gt; or &lt;code&gt;summarise(count = n())&lt;/code&gt; to count the number of occurrences in the chosen grouping. This provides us with a count column, but we also want to structure the data frames for source and destination in the same way. Therefore, I rename the column containing the city information to âplace.â Doing this removes information about whether the observation is a source or destination, and so I add in this data with &lt;code&gt;add_column()&lt;/code&gt;, creating a &amp;ldquo;type&amp;rdquo; column. The last step in this pipeline is to remove the grouping from the data frames, as this is no longer useful information and could influence later manipulations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Letters per source&lt;/span&gt;
sources &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  count&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  rename&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;place &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  add_column&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;type &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  ungroup&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Letters per destination&lt;/span&gt;
destinations &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;destination&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  count&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  rename&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;place &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; destination&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  add_column&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;type &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  ungroup&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, you can use either &lt;code&gt;rbind()&lt;/code&gt; or &lt;code&gt;full_join()&lt;/code&gt; to bind the rows of &lt;code&gt;sources&lt;/code&gt; and &lt;code&gt;destinations&lt;/code&gt; together to create a &lt;code&gt;letters_data&lt;/code&gt; data frame that contains the non-spatial data we will be using. In addition, we need to make a small but important change to the type of data in the &amp;ldquo;type&amp;rdquo; column to make it possible to differentiate between the sources and destinations in the base R plots created below. We can transform the &amp;ldquo;type&amp;rdquo; column to a factor using &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;as_factor()&lt;/code&gt; from the &lt;a href=&#34;http://forcats.tidyverse.org&#34;&gt;&lt;code&gt;forcats&lt;/code&gt;&lt;/a&gt; package. This changes the way that R represents the data behind the scenes such that &amp;ldquo;source&amp;rdquo; and &amp;ldquo;destination&amp;rdquo; can be represented by numeric integers, which is necessary for working with colors in base R plots.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Bind the rows of the two data frames&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# and change type column to factor&lt;/span&gt;
letters_data &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;rbind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sources&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; destinations&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;type &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; as_factor&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s look at the result. We can see that the data is in the format that we are looking for and that the &amp;ldquo;type&amp;rdquo; column has been correctly transformed into factors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Print letters_data&lt;/span&gt;
letters_data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 14 x 3
##    place          n type       
##    &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;fctr&amp;gt;     
##  1 Amsterdam      1 source     
##  2 Antwerp       76 source     
##  3 Dordrecht      1 source     
##  4 Emden          1 source     
##  5 Haarlem       30 source     
##  6 Hamburg        1 source     
##  7 Het Vlie       1 source     
##  8 Lisse          1 source     
##  9 Venice         2 source     
## 10 Bremen         6 destination
## 11 Delft         95 destination
## 12 Haarlem        8 destination
## 13 Middelburg     2 destination
## 14 The Hague      3 destination&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having created the data for the number of letters sent from and received in each location, we now need to add the longitude and latitude of the cities. We can do this with a left join with the &lt;code&gt;locations&lt;/code&gt; data frame, using the &amp;ldquo;place&amp;rdquo; column as the key to link the two data frames.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Join letters_data to locations&lt;/span&gt;
geo_data &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; left_join&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;letters_data&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; locations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;place&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Print data with longitude and latitude columns&lt;/span&gt;
geo_data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 14 x 5
##    place          n type          lon   lat
##    &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;fctr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Amsterdam      1 source       4.90  52.4
##  2 Antwerp       76 source       4.40  51.2
##  3 Dordrecht      1 source       4.69  51.8
##  4 Emden          1 source       7.21  53.4
##  5 Haarlem       30 source       4.65  52.4
##  6 Hamburg        1 source       9.99  53.6
##  7 Het Vlie       1 source       5.18  53.3
##  8 Lisse          1 source       4.56  52.3
##  9 Venice         2 source      12.3   45.4
## 10 Bremen         6 destination  8.80  53.1
## 11 Delft         95 destination  4.36  52.0
## 12 Haarlem        8 destination  4.65  52.4
## 13 Middelburg     2 destination  3.61  51.5
## 14 The Hague      3 destination  4.30  52.1&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is a data frame with 14 rows and 5 columns that give the number of letters sent from and received in the different locations and the longitude and latitude of those places. We now have all of the information that we need to transform this data into a spatial object with both &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt;. We will then be able to map the points on base maps provided by the &lt;code&gt;rnaturalearth&lt;/code&gt; package.&lt;/p&gt;

&lt;h2 id=&#34;sp&#34;&gt;Spatial data with &lt;code&gt;sp&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The creation of a &lt;code&gt;Spatial&lt;/code&gt; object involves providing data for the slots expected for each subclass. Creating a &lt;code&gt;SpatialPoints&lt;/code&gt; object requires data for the &lt;code&gt;coords&lt;/code&gt; and &lt;code&gt;proj4string&lt;/code&gt; slots.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10&#34;&gt;10&lt;/a&gt;&lt;/sup&gt; The information for the &lt;code&gt;coords&lt;/code&gt; slot can be filled by a data frame of the longitude and latitude values from &lt;code&gt;geo_data&lt;/code&gt;. This can be done by creating a new data frame that only contains the &amp;ldquo;lon&amp;rdquo; and &amp;ldquo;lat&amp;rdquo; columns of &lt;code&gt;geo_data&lt;/code&gt;. As noted above, the CRS for our data is implicitly longitude and latitude values on the WGS84 ellipsoid, which we can identify through the &lt;code&gt;CRS()&lt;/code&gt; function containing a PROJ argument. We can either specify the specific projection and datum arguments with &lt;code&gt;+proj=longlat +datum=WGS84&lt;/code&gt; or use the EPSG code with &lt;code&gt;+init=epsg:4326&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create data frame of only longitude and latitude values&lt;/span&gt;
coords &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; select&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;geo_data&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Create SpatialPoints object with coords and CRS&lt;/span&gt;
points_sp &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; SpatialPoints&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;coords &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; coords&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                           proj4string &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; CRS&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;+proj=longlat +datum=WGS84&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Printing out our newly created &lt;code&gt;SpatialPoints&lt;/code&gt; object does not make for particularly exciting reading. We see the coordinates, which are now in matrix form, and the CRS of the object. We can get a better insight into the structure of the object with the &lt;code&gt;str()&lt;/code&gt; command, even if the style of the output is a bit off-putting at first. This shows the three slots for the &lt;code&gt;SpatialPoints&lt;/code&gt; object and the values contained within the slots.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Print SpatialPoints object&lt;/span&gt;
points_sp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## SpatialPoints:
##             lon      lat
##  [1,]  4.895168 52.37022
##  [2,]  4.402464 51.21945
##  [3,]  4.690093 51.81330
##  [4,]  7.206010 53.35940
##  [5,]  4.646219 52.38739
##  [6,]  9.993682 53.55108
##  [7,]  5.183333 53.30000
##  [8,]  4.557483 52.25793
##  [9,] 12.315515 45.44085
## [10,]  8.801694 53.07930
## [11,]  4.357068 52.01158
## [12,]  4.646219 52.38739
## [13,]  3.610998 51.49880
## [14,]  4.300700 52.07050
## Coordinate Reference System (CRS) arguments: +proj=longlat
## +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Structure of SpatialPoints object&lt;/span&gt;
str&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_sp&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Formal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SpatialPoints&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slots&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.9&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.4&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.69&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;7.21&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.65&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dimnames&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NULL&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lon&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lat&amp;#34;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bbox&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.61&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;45.44&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;12.32&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;53.55&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dimnames&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lon&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lat&amp;#34;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;min&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proj4string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Formal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CRS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slot&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;projargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0&amp;#34;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have now successfully created a &lt;code&gt;Spatial&lt;/code&gt; object. However, &lt;code&gt;points_sp&lt;/code&gt; does not contain any of the non-spatial data that was created in preparing the data. We can attach this non-spatial data to the &lt;code&gt;Spatial&lt;/code&gt; data by creating a &lt;code&gt;SpatialPointsDataFrame&lt;/code&gt; object. This is done in the same manner as a &lt;code&gt;SpatialPoints&lt;/code&gt; object but also includes filling the &lt;code&gt;data&lt;/code&gt; slot with the &lt;code&gt;letters_data&lt;/code&gt; data frame.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11&#34;&gt;11&lt;/a&gt;&lt;/sup&gt; Because the data in both the &lt;code&gt;coords&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; slots derived from the same source, the coordinates and non-spatial data will be correctly aligned by row number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create SpatialPointsDataFrame object&lt;/span&gt;
points_spdf &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; SpatialPointsDataFrame&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;coords &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; coords&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                      data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; letters_data&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
                                      proj4string &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; CRS&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;+proj=longlat +datum=WGS84&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Printing out &lt;code&gt;points_spdf&lt;/code&gt; shows a result not dramatically different from printing out the &lt;code&gt;geo_data&lt;/code&gt; data frame. However, inspecting the structure of the object shows that it has a very different composition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Print out SpatialPointsDataFrame&lt;/span&gt;
points_spdf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;##             coordinates      place  n        type
## 1  (4.895168, 52.37022)  Amsterdam  1      source
## 2  (4.402464, 51.21945)    Antwerp 76      source
## 3   (4.690093, 51.8133)  Dordrecht  1      source
## 4    (7.20601, 53.3594)      Emden  1      source
## 5  (4.646219, 52.38739)    Haarlem 30      source
## 6  (9.993682, 53.55108)    Hamburg  1      source
## 7      (5.183333, 53.3)   Het Vlie  1      source
## 8  (4.557483, 52.25793)      Lisse  1      source
## 9  (12.31552, 45.44085)     Venice  2      source
## 10  (8.801694, 53.0793)     Bremen  6 destination
## 11 (4.357068, 52.01158)      Delft 95 destination
## 12 (4.646219, 52.38739)    Haarlem  8 destination
## 13  (3.610998, 51.4988) Middelburg  2 destination
## 14    (4.3007, 52.0705)  The Hague  3 destination&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Structure of SpatialPointsDataFrame object&lt;/span&gt;
str&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Formal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SpatialPointsDataFrame&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slots&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Classes&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tbl_df&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tbl&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;place&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Amsterdam&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Antwerp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Dordrecht&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Emden&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;76&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Factor&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;levels&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nrs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.9&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.4&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.69&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;7.21&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.65&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dimnames&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NULL&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lon&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lat&amp;#34;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bbox&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.61&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;45.44&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;12.32&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;53.55&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dimnames&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lon&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lat&amp;#34;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;min&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proj4string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Formal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CRS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slot&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;projargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0&amp;#34;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The nature of a &lt;code&gt;SpatialPointsDataFrame&lt;/code&gt; object means that they cannot be manipulated in the same way as a normal data frame. You can access the data frame as you would any of the other slots in a &lt;code&gt;Spatial&lt;/code&gt; object with the &lt;code&gt;points_spdf@data&lt;/code&gt; notation. However, if you want to make changes to the &lt;code&gt;points_spdf&lt;/code&gt; through an aspect of the &lt;code&gt;data&lt;/code&gt; slot, you cannot use &lt;code&gt;dplyr&lt;/code&gt; commands. Instead, you need to use base R methods, which can be a bit more convoluted. For instance, if you want to get the observations of places in which Daniel either received or was sent a certain number of letters you would use &lt;code&gt;@data&lt;/code&gt; to access the data frame, &lt;code&gt;[]&lt;/code&gt; to subset, and &lt;code&gt;$&lt;/code&gt; to access the column that you want to subset. You can see an example of this below, creating a &lt;code&gt;SpatialPointsDataFrame&lt;/code&gt; that contains the three locations in which &amp;ldquo;n&amp;rdquo; is greater than 10 and simply printing out the result to demonstrate the workflow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Access the data frame of a SpatialPointsDataFrame&lt;/span&gt;
points_spdf&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 14 x 3
##    place          n type       
##    &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;fctr&amp;gt;     
##  1 Amsterdam      1 source     
##  2 Antwerp       76 source     
##  3 Dordrecht      1 source     
##  4 Emden          1 source     
##  5 Haarlem       30 source     
##  6 Hamburg        1 source     
##  7 Het Vlie       1 source     
##  8 Lisse          1 source     
##  9 Venice         2 source     
## 10 Bremen         6 destination
## 11 Delft         95 destination
## 12 Haarlem        8 destination
## 13 Middelburg     2 destination
## 14 The Hague      3 destination&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Example of subsetting `points_spdf` to return locations with &amp;#34;n&amp;#34; greater than 10&lt;/span&gt;
points_spdf&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;points_spdf&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;data&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;n &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;##            coordinates   place  n        type
## 1 (4.402464, 51.21945) Antwerp 76      source
## 2 (4.646219, 52.38739) Haarlem 30      source
## 3 (4.357068, 52.01158)   Delft 95 destination&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make a map with the &lt;code&gt;SpatialPoints&lt;/code&gt; objects of the correspondence of Daniel, we need to get a background map of western Europe to provide geographical context. There are a number of R packages that provide access to various maps which can be read in as &lt;code&gt;Spatial&lt;/code&gt; data. Here, I will make use of the &lt;code&gt;rnaturalearth&lt;/code&gt; package to get access to a map of the coastlines of the world and another for the countries in the world.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12&#34;&gt;12&lt;/a&gt;&lt;/sup&gt; This will create two different kinds of &lt;code&gt;Spatial&lt;/code&gt; objects. Because both maps contain non-spatial attribute data, they will be of class &lt;code&gt;SpatialLinesDataFrame&lt;/code&gt; and &lt;code&gt;SpatialpolygonsDataFrame&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Get coastal and country world maps as Spatial objects&lt;/span&gt;
coast_sp &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; ne_coastline&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;scale &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;medium&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
countries_sp &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; ne_countries&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;scale &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;medium&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not only are &lt;code&gt;coast_sp&lt;/code&gt; and &lt;code&gt;countries_sp&lt;/code&gt; useful for mapping the points data, they also provide an opportunity to look at the structure of more complex &lt;code&gt;Spatial&lt;/code&gt; objects. Printing out either object fills up the entire console with an overflow of information. Instead, we can get an idea of the structure of the two objects with the &lt;code&gt;str()&lt;/code&gt; command. To ensure that we do not overloaded with information with this command, I will only show the first two levels, which shows information about the slots but not on the data within the slots.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Structure of SpatialLinesDataFrame&lt;/span&gt;
str&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;coast_sp&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; max.level &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Formal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SpatialLinesDataFrame&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slots&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;1428&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lines&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1428&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bbox&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;85.2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;83.6&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dimnames&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proj4string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Formal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CRS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slot&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Structure of SpatialPolygonsDataFrame&lt;/span&gt;
str&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;countries_sp&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; max.level &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Formal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SpatialPolygonsDataFrame&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slots&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;241&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;polygons&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;241&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;plotOrder&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;241&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;184&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;39&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;227&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;113&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bbox&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;83.6&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dimnames&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proj4string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Formal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CRS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slot&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output from &lt;code&gt;str()&lt;/code&gt; shows that &lt;code&gt;coast_sp&lt;/code&gt; and &lt;code&gt;countries_sp&lt;/code&gt; are mainly distinguished by the presence of a &lt;code&gt;lines&lt;/code&gt; or a &lt;code&gt;polygons&lt;/code&gt; slot. Both of the objects contain data frames, but they are very different. The data frame in &lt;code&gt;coast_sp&lt;/code&gt; only contains two columns, but &lt;code&gt;countries_sp&lt;/code&gt; has 63 columns. This is because the countries map from &lt;code&gt;rnaturalearth&lt;/code&gt; contains a variety of population, economic, and labeling data. We do not need to deal with the &lt;code&gt;data&lt;/code&gt; slots from either of these objects, but they do provide a good example of what these kind of &lt;code&gt;Spatial&lt;/code&gt; objects look like.&lt;/p&gt;

&lt;p&gt;The last thing that we should do before plotting the points on our background maps is to make sure that our objects all have the same CRS. If &lt;code&gt;points_spdf&lt;/code&gt; and &lt;code&gt;coast_sp&lt;/code&gt; have different CRSs, the points will not be correctly plotted. We can check this with either the &lt;code&gt;proj4string()&lt;/code&gt; function or printing out the &lt;code&gt;proj4string&lt;/code&gt; slot. Checking this shows that all of the &lt;code&gt;Spatial&lt;/code&gt; objects are using geographic coordinates on the WSG84 ellipsoid, enabling us to move forward with plotting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Check CRS of Spatial objects&lt;/span&gt;
coast_sp&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;proj4string&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## CRS arguments:
##  +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;proj4string&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;countries_sp&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&amp;#34;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;proj4string&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0&amp;#34;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;mapping-sp&#34;&gt;Mapping with &lt;code&gt;sp&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Just as &lt;code&gt;Spatial&lt;/code&gt; objects cannot be manipulated with &lt;code&gt;dplyr&lt;/code&gt; commands, they cannot be plotted using &lt;code&gt;ggplot2&lt;/code&gt;. &lt;code&gt;Spatial&lt;/code&gt; objects can be plotted using the base R plot system or with its own plotting method that uses the Trellis plotting system with the &lt;code&gt;spplot()&lt;/code&gt; command. Here, I will stick to the base plotting methods, but if you want to look at &lt;code&gt;spplot()&lt;/code&gt; methods, Edzer Pebesma has created a good &lt;a href=&#34;https://edzer.github.io/sp/&#34;&gt;gallery of sp plots&lt;/a&gt;. For a more in depth discussion on both plotting methods see Chapter 3 of Bivand, Pebesma, and GÃ³mez-Rubio, &lt;em&gt;Applied Spatial Data Analysis with R&lt;/em&gt;. I will discuss creating a map with the base R plotting system in some detail, because the commands are not particularly intuitive, and I have found it more difficult to find good information about making base plots compared to the use of &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The plotting method for base R uses incremental commands to add different layers, allowing you to plot multiple types of data and add annotations such as legends and titles. The process can be somewhat tedious, and if you decide to change an aspect of the plot you need to rerun the entire string of commands. The necessity of building up every level of the plot with explicit commands has advantages and disadvantages when compared to &lt;code&gt;ggplot2&lt;/code&gt;, which automates certain aspects of plot creation. For instance, base plots do not automate the creation of legends in the same way that &lt;code&gt;ggplot2&lt;/code&gt; does. This makes the creation of legends more difficult, but because you have to construct each piece of the legend, its production can be more transparent than with &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Base plotting methods enable you to manipulate a &lt;a href=&#34;http://colinfay.me/intro-to-r/graphical-procedures.html&#34;&gt;wide variety of parameters&lt;/a&gt; about your plots. You can see the whole list with &lt;code&gt;?par&lt;/code&gt;. For this post, I will concentrate on some of the more widely used parameters to plot the points data we have created above on two different background maps. With these maps I want to visualize three different types of data: the location of the points represented in &lt;code&gt;points_spdf@coords&lt;/code&gt;, whether the point represents a source or destination of the letters from the &amp;ldquo;type&amp;rdquo; column, and a representation of the amount of letters sent or received in the location from the &amp;ldquo;n&amp;rdquo; column. The latter two types of data can be represented through color and the size of the points respectively. Let&amp;rsquo;s see how this works in practice.&lt;/p&gt;

&lt;p&gt;Even before beginning to plot our &lt;code&gt;Spatial&lt;/code&gt; objects, we should set up the plotting environment by modifying the default margins to a smaller size that will work for the plots we want to make. The margins of a plot are identified by the &lt;code&gt;mar&lt;/code&gt; or &lt;code&gt;mai&lt;/code&gt; arguments within &lt;code&gt;par()&lt;/code&gt;. Here, I will use &lt;code&gt;mar&lt;/code&gt;, which provides the margins in units of lines. To change the margins we need to pass a vector of values for the bottom, left, top, and right margins. In this case, I will use &lt;code&gt;par(mar = c(1, 1, 3, 1))Â &lt;/code&gt; to give some minimal margins and some room for a title at the top of the plot.&lt;/p&gt;

&lt;p&gt;The location of the points of a &lt;code&gt;SpatialPoints&lt;/code&gt; object are plotted automatically with &lt;code&gt;plot(points_spdf)&lt;/code&gt;. However, the default for plotting &lt;code&gt;SpatialPoints&lt;/code&gt; is to represent the points by an addition sign. We can change the symbol to represent the points with &lt;code&gt;pch&lt;/code&gt; or the plotting character parameter. There are 25 available characters, and here I will use &lt;code&gt;pch = 20&lt;/code&gt;, which is a solid circle.&lt;/p&gt;

&lt;p&gt;Modifying the color and size of these circles is a bit trickier. The color of the circles can be adjusted with the &lt;code&gt;col&lt;/code&gt; parameter according to the information in &lt;code&gt;points_spdf$type&lt;/code&gt;. We are able to map the colors of the points to the &amp;ldquo;type&amp;rdquo; variable, because we earlier changed the column to be factors instead of characters. If this had not been done, the &lt;code&gt;plot()&lt;/code&gt; command would fail. The default colors for the first two levels of factors are black and red, which &lt;a href=&#34;https://bookdown.org/rdpeng/exdata/plotting-and-color-in-r.html&#34;&gt;are not particularly pleasant to look at&lt;/a&gt;. However, we can create a new color palette with the &lt;code&gt;palette()&lt;/code&gt; function. Here, I am using the named colors &amp;ldquo;darkorchid&amp;rdquo; and &amp;ldquo;darkorange&amp;rdquo;, while also adding some transparency to the points with the &lt;code&gt;alpha()&lt;/code&gt; function from &lt;code&gt;ggplot2&lt;/code&gt; since some of the points overlap.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:13&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:13&#34;&gt;13&lt;/a&gt;&lt;/sup&gt; You can get a list of all of the named colors in R with &lt;code&gt;colors()&lt;/code&gt;. The palette has to be created before beginning to make the plot, and this will change the color palette for all further base plots. You can return to the default palette with &lt;code&gt;palette(&amp;quot;default&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cex&lt;/code&gt; parameter is used to modify the size of the points that will be plotted. We can set the size of the points to &lt;code&gt;points_spdf$n&lt;/code&gt;, but first we need to make some modifications. We do not want the point sizes to be the actual value in the &amp;ldquo;n&amp;rdquo; column. A point with &lt;code&gt;cex = 95&lt;/code&gt; â the maximum number of letters in the data â would create a point larger then the plot. Therefore, we need to adjust the minimum and maximum size of the points according to some formula. This could be done in a variety of ways, but here I choose the formula &lt;code&gt;sqrt(points_spdf$n)/2 + 0.25&lt;/code&gt;, which reduces the minimum &lt;code&gt;cex&lt;/code&gt; to 0.75 and the maximum to a bit over 5. The other additions that I make are to add a box around the plot with &lt;code&gt;box()&lt;/code&gt; and a title with &lt;code&gt;title()&lt;/code&gt; in separate commands. These two commands decorate the plot and provides and example of the way that layers can be added to a base plot. Let&amp;rsquo;s see how this looks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create a new color palette to distinguish source and destination&lt;/span&gt;
palette&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;alpha&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;darkorchid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;darkorange&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Set margins for bottom, left, top, and right of plot&lt;/span&gt;
par&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;mar &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Plot points&lt;/span&gt;
plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     pch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     col &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; points_spdf&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     cex &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;n&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Add a box around the plot&lt;/span&gt;
box&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Add a title&lt;/span&gt;
title&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;main &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Correspondence of Daniel van der Meulen, 1585&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/gis-with-r-intro/points_spdf-plot-1.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, we have points, but we do not have a map. We can add a background map with a separate call to the &lt;code&gt;plot()&lt;/code&gt; function that contains &lt;code&gt;add = TRUE&lt;/code&gt;. One nice aspect of using the base plotting methods with &lt;code&gt;Spatial&lt;/code&gt; objects is that even though the coastline map we are using is a world map, adding it to our previous plot properly scales the map to the geographical extent of the data from the first plotting function. The only other change is to make the color of the coastlines black with the &lt;code&gt;col&lt;/code&gt; parameter. This needs to be done, because we changed the color palette above. If we did not make this change, the coastlines would be drawn in dark orchid.&lt;/p&gt;

&lt;p&gt;The final step in making this map is to create legends to show the meaning of the colors and size of the points. This will require making two legends, which can be done with two calls to the &lt;code&gt;legend()&lt;/code&gt; function. It is a bit fiddly to make these legends and build up every aspect, but the basis for what needs to be done is already present in the &lt;code&gt;plot()&lt;/code&gt; functions. The &lt;code&gt;legend()&lt;/code&gt; function takes a position for where to place the legend and the data to use for it. It is then a matter of using parameters to create informative legends.&lt;/p&gt;

&lt;p&gt;Creating a legend for the distinction between sources and destinations uses data from the levels of the factors in the type column, which can be represented by &lt;code&gt;levels(points_spdf$type)&lt;/code&gt;. We can map the colors to the levels with a vector containing the two levels, and here I use the shortcut of &lt;code&gt;1:2&lt;/code&gt; to represent the two colors in the palette we created above. The &lt;code&gt;pch&lt;/code&gt; parameter provides a symbol to represent the colors. In this case, I decided to use a filled square. The &lt;code&gt;pt.cex&lt;/code&gt; parameter is used to increase the size of the colored squares, which we need to use because the &lt;code&gt;cex&lt;/code&gt; parameter within &lt;code&gt;legend()&lt;/code&gt; determines the size of the entire legend.&lt;/p&gt;

&lt;p&gt;The legend to relate the size of the points to the number of letters sent from or received in each location is a bit more difficult to create, as we do not yet have all the necessary components for the legend. A legend for the size of the points will possess three or four points of different sizes and the number of letters they represent. &lt;code&gt;ggplot2&lt;/code&gt; does this creation automatically, but with base plots you have to choose the number and size of the points yourself. This means we need to make our own data for the legend, which I do here by creating a &lt;code&gt;pointsize&lt;/code&gt; vector that will be used to show the size of points representing 1, 50, and 100 letters.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:14&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:14&#34;&gt;14&lt;/a&gt;&lt;/sup&gt; Once this is done, the creation of the legend is fairly straightforward. The key is to remember to make the point sizes for our vector of numbers equal to the points on the map by applying the same formula and using the same &lt;code&gt;pch&lt;/code&gt;. A title for the legend makes it clearer that the map represents letters.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:15&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:15&#34;&gt;15&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Pointsize vector for legend&lt;/span&gt;
pointsize &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
par&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;mar &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Plot points&lt;/span&gt;
plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     pch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     col &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; points_spdf&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     cex &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;n&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Plot coastlines background map&lt;/span&gt;
plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;coast_sp&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     col &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     add &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Add a box around the plot&lt;/span&gt;
box&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Legend for colors&lt;/span&gt;
legend&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;topright&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; legend &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;levels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
       pt.cex &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       col &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       pch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# legend for size of points&lt;/span&gt;
legend&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; legend &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pointsize&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       pt.cex &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;pointsize&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
       col &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       pch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       title &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Title for the map&lt;/span&gt;
title&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;main &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Correspondence of Daniel van der Meulen, 1585&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/gis-with-r-intro/coast_sp-plot-1.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The resulting map is maybe a bit sparse, but it provides all the necessary information on the locations and magnitude of Daniel&amp;rsquo;s correspondence in 1585. One change that we might want to make is to color in the land to distinguish more clearly between land and water and to add some color to the plot. This cannot be done with our &lt;code&gt;SpatialLines&lt;/code&gt; of the coastlines, which does not have a geometric interior that could be filled. Instead we need to use a &lt;code&gt;SpatialPolygons&lt;/code&gt; object such as &lt;code&gt;countries_sp&lt;/code&gt;. To make this second map we can reuse many of the parameters from our first map, but we do need to make one significant change to the plotting workflow. Because we want to fill in the land area of the map, we need to plot the background map before plotting the points. Otherwise the background map will cover the points. However, this disturbs the automatic subsetting of the world map that occurred in the first plot. We can get around this by changing the bounding box of &lt;code&gt;countries_sp&lt;/code&gt; (&lt;code&gt;countries_sp@bbox&lt;/code&gt;) to match that of &lt;code&gt;points_spdf&lt;/code&gt; with the &lt;code&gt;bbox()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Make bounding box for countries_sp match&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# bounding box of points_spdf&lt;/span&gt;
countries_sp&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;bbox &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; bbox&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the countries map is properly limited to the extent of the points, we can reuse most of the parameters from the first map. The only difference from the previous plot other than placing the background map first in the plotting order is the choice of colors for &lt;code&gt;countries_sp&lt;/code&gt;. For a &lt;code&gt;SpatialPolygons&lt;/code&gt; object the &lt;code&gt;col&lt;/code&gt; parameter adjusts the fill color for the polygons, and the &lt;code&gt;border&lt;/code&gt; parameter modifies the color of the lines of the polygons. Using a map with modern country boundaries is clearly anachronistic for plotting letters from 1585, but the boundaries do help to contextualize the locations. If you want to obscure the country borders completely, you can make the &lt;code&gt;col&lt;/code&gt; and &lt;code&gt;border&lt;/code&gt; parameters the same color. In this case, I will use the &lt;code&gt;gray()&lt;/code&gt; function, which enables you to choose a gray level from 0 to 1 with 0 representing black and 1 for white.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;par&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;mar &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Plot countries map and color with grays&lt;/span&gt;
plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;countries_sp&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     col &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; gray&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
     border &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; gray&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Plot points&lt;/span&gt;
plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     pch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     col &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; points_spdf&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
     cex &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;n&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
     add &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Add a box around the plot&lt;/span&gt;
box&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Legend for colors&lt;/span&gt;
legend&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;topright&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       legend &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;levels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_spdf&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
       pt.cex &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       col &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       pch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# legend for size of points&lt;/span&gt;
legend&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       legend &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pointsize&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       pt.cex &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;pointsize&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
       col &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       pch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       title &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Title for the map&lt;/span&gt;
title&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;main &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Correspondence of Daniel van der Meulen, 1585&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/gis-with-r-intro/countries_sp-plot-1.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The above maps along with the creation of &lt;code&gt;Spatial&lt;/code&gt; objects and the use of maps from outside sources demonstrates the value of the &lt;code&gt;sp&lt;/code&gt; package. The above examples only show the basics of working with different kinds of &lt;code&gt;Spatial&lt;/code&gt; objects and does not take advantage of any of the spatial transformations or calculations that using &lt;code&gt;sp&lt;/code&gt; enables. However, the R GIS community is increasingly moving towards the &lt;code&gt;sf&lt;/code&gt; package. The &lt;code&gt;sf&lt;/code&gt; package provides almost all of the &lt;a href=&#34;https://github.com/r-spatial/sf/wiki/migrating&#34;&gt;capabilities of &lt;code&gt;sp&lt;/code&gt;&lt;/a&gt;, but it uses objects that are easier to work with than the S4-style classes of &lt;code&gt;sp&lt;/code&gt;. The next section will replicate the workflow of creating and mapping spatial points data using &lt;code&gt;sf&lt;/code&gt; methods, which will serve to illuminate the differences between the two packages.&lt;/p&gt;

&lt;h2 id=&#34;sf&#34;&gt;Spatial data with &lt;code&gt;sf&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;As I noted above, an &lt;code&gt;sf&lt;/code&gt; object is a data-frame-like object that contains a special geometry column that is of class &lt;code&gt;sfc&lt;/code&gt;. The geometry column stores the spatial forms of data such as the CRS, coordinates, and type of geometric object. The creation of an &lt;code&gt;sf&lt;/code&gt; object with a geometry column of class &lt;code&gt;sfc_POINT&lt;/code&gt; is similar to creating a &lt;code&gt;SpatialPointsDataFrame&lt;/code&gt;, but it can be done in a single step with a data frame that contains longitude and latitude columns. The &lt;code&gt;st_as_sf()&lt;/code&gt; function uses a vector of the coordinate columns for the &lt;code&gt;coords&lt;/code&gt; argument and either a EPSG code or a PROJ definition for the &lt;code&gt;crs&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create sf object with geo_data data frame and CRS&lt;/span&gt;
points_sf &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; st_as_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;geo_data&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; coords &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; crs &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4326&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;class()&lt;/code&gt; function shows that &lt;code&gt;points_sf&lt;/code&gt; is an &lt;code&gt;sf&lt;/code&gt; object that is an extension of a &lt;code&gt;data.frame&lt;/code&gt;, and in this case is an extension of &lt;code&gt;tbl_df&lt;/code&gt;, because &lt;code&gt;geo_data&lt;/code&gt; is a &lt;a href=&#34;http://r4ds.had.co.nz/tibbles.html&#34;&gt;tibble&lt;/a&gt;. Printing &lt;code&gt;points_sf&lt;/code&gt; results in an output similar to that of a tibble or data frame with additional information about the spatial aspects of the data provided by the &amp;ldquo;geometry&amp;rdquo; column. The information about the geometry shows the type of geometrical object, dimension, bounding box, and the CRS in both EPSG and PROJ format when possible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Getting the class of an sf object shows that it is based on tibble and data frame.&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_sf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;sf&amp;#34;         &amp;#34;tbl_df&amp;#34;     &amp;#34;tbl&amp;#34;        &amp;#34;data.frame&amp;#34;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Printing out an sf object is similar to tibble or data frame&lt;/span&gt;
points_sf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## Simple feature collection with 14 features and 3 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: 3.610998 ymin: 45.44085 xmax: 12.31552 ymax: 53.55108
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
## # A tibble: 14 x 4
##    place          n type        geometry                 
##    &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;fctr&amp;gt;      &amp;lt;simple_feature&amp;gt;         
##  1 Amsterdam      1 source      c(4.8951679, 52.3702157) 
##  2 Antwerp       76 source      c(4.4024643, 51.2194475) 
##  3 Dordrecht      1 source      c(4.6900929, 51.8132979) 
##  4 Emden          1 source      c(7.2060095, 53.3594029) 
##  5 Haarlem       30 source      c(4.6462194, 52.3873878) 
##  6 Hamburg        1 source      c(9.9936819, 53.5510846) 
##  7 Het Vlie       1 source      c(5.183333, 53.3)        
##  8 Lisse          1 source      c(4.5574834, 52.2579303) 
##  9 Venice         2 source      c(12.3155151, 45.4408474)
## 10 Bremen         6 destination c(8.8016936, 53.0792962) 
## 11 Delft         95 destination c(4.3570677, 52.0115769) 
## 12 Haarlem        8 destination c(4.6462194, 52.3873878) 
## 13 Middelburg     2 destination c(3.610998, 51.4987962)  
## 14 The Hague      3 destination c(4.3006999, 52.0704978)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can inspect the class of the geometry column itself by using &lt;code&gt;$&lt;/code&gt; to subset the geometry column. Or you can directly access information about the spatial data in the &amp;ldquo;geometry&amp;rdquo; column with the &lt;code&gt;st_geometry()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Class of the geometry or sfc column&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_sf&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;geometry&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;sfc_POINT&amp;#34; &amp;#34;sfc&amp;#34;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Retrieve the geometry of an sf object&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# to see coordinates, type of feature, and CRS&lt;/span&gt;
st_geometry&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_sf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## Geometry set for 14 features 
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: 3.610998 ymin: 45.44085 xmax: 12.31552 ymax: 53.55108
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
## First 5 geometries:
## POINT (4.895168 52.37022)
## POINT (4.402464 51.21945)
## POINT (4.690093 51.8133)
## POINT (7.20601 53.3594)
## POINT (4.646219 52.38739)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having already loaded the Natural Earth coastline and countries maps as &lt;code&gt;Spatial&lt;/code&gt; objects, there are two possibilities for getting the same data as &lt;code&gt;sf&lt;/code&gt; objects. The &lt;code&gt;sf&lt;/code&gt; package provides a method for converting from &lt;code&gt;Spatial&lt;/code&gt; classes to &lt;code&gt;sf&lt;/code&gt; with the &lt;code&gt;st_as_sf()&lt;/code&gt; function that was used above to create an &lt;code&gt;sf&lt;/code&gt; object from a data frame. It is useful to know that you can easily convert an object from &lt;code&gt;Spatial&lt;/code&gt; to &lt;code&gt;sf&lt;/code&gt; and back, but you will obviously not always have &lt;code&gt;Spatial&lt;/code&gt; objects already created. The &lt;code&gt;rnaturalearth&lt;/code&gt; package enables you to create &lt;code&gt;sf&lt;/code&gt; objects with the &lt;code&gt;returnclass = &amp;quot;sf&amp;quot;&lt;/code&gt; argument. Here, I will use the latter method.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:16&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:16&#34;&gt;16&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;coast_sf &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; ne_coastline&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;scale &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;medium&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; returnclass &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
countries_sf &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; ne_countries&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;scale &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;medium&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; returnclass &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The data-frame-like nature of &lt;code&gt;sf&lt;/code&gt; objects makes working with spatial data more transparent and in-line with other data workflows compared to the &lt;code&gt;sp&lt;/code&gt; package. For starters, it is more reasonable to print out &lt;code&gt;sf&lt;/code&gt; objects to the console, though the size of &lt;code&gt;coast_sf&lt;/code&gt; and &lt;code&gt;countries_sf&lt;/code&gt; makes this less than ideal. However, a big advantage of &lt;code&gt;sf&lt;/code&gt; over &lt;code&gt;sp&lt;/code&gt; is that you can easily peruse the contents of an object with the &lt;code&gt;View()&lt;/code&gt; command or clicking on the object in the Environment pane in RStudio. With the &lt;code&gt;View()&lt;/code&gt; command an &lt;code&gt;sf&lt;/code&gt; object looks like any other data frame instead of a list of lists like a &lt;code&gt;Spatial&lt;/code&gt; object. This makes it much easier to get an overview of the data that you are working with. Let&amp;rsquo;s print out the first six rows, or features in the &lt;code&gt;sf&lt;/code&gt; vocabulary, of &lt;code&gt;coast_sf&lt;/code&gt; with the &lt;code&gt;head()&lt;/code&gt; function to give an idea of what the object looks like. The structure of the output is similar to that of &lt;code&gt;points_sf&lt;/code&gt; with a data frame containing a geometry column and information about the geometry of the object. In this case, we can see that &lt;code&gt;coast_sf&lt;/code&gt; is of class &lt;code&gt;MULTILINESTRING&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Print first six rows of coast_sf&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;coast_sf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## Simple feature collection with 6 features and 2 fields
## geometry type:  MULTILINESTRING
## dimension:      XY
## bbox:           xmin: -81.42168 ymin: -17.16387 xmax: 180 ymax: 24.94111
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
##   scalerank featurecla                       geometry
## 0         0  Coastline MULTILINESTRING ((180 -16.1...
## 1         0  Coastline MULTILINESTRING ((177.25751...
## 2         0  Coastline MULTILINESTRING ((127.37265...
## 3         0  Coastline MULTILINESTRING ((-81.32231...
## 4         0  Coastline MULTILINESTRING ((-80.79941...
## 5         0  Coastline MULTILINESTRING ((-80.62568...&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike &lt;code&gt;Spatial&lt;/code&gt; objects that use slots to distinguish the classes, all &lt;code&gt;sf&lt;/code&gt; objects can generally be treated as data frames when wrangling the data. The only difference in the structure of &lt;code&gt;points_sf&lt;/code&gt; compared to &lt;code&gt;coast_sf&lt;/code&gt; or &lt;code&gt;countries_sf&lt;/code&gt; is the class of the geometry column. This makes it possible to use workflows from the tidyverse. For instance, returning the subset of locations from &lt;code&gt;points_sf&lt;/code&gt; that have a &amp;ldquo;n&amp;rdquo; greater than 10, as I showed above with &lt;code&gt;points_spdf&lt;/code&gt;, can be done with &lt;code&gt;dplyr&lt;/code&gt;&amp;rsquo;s &lt;code&gt;filter()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Subset of locations with &amp;#34;n&amp;#34; greater than 10&lt;/span&gt;
filter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;points_sf&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; n &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## Simple feature collection with 3 features and 3 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: 4.357068 ymin: 51.21945 xmax: 4.646219 ymax: 52.38739
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
## # A tibble: 3 x 4
##   place       n type        geometry                
##   &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;fctr&amp;gt;      &amp;lt;simple_feature&amp;gt;        
## 1 Antwerp    76 source      c(4.4024643, 51.2194475)
## 2 Haarlem    30 source      c(4.6462194, 52.3873878)
## 3 Delft      95 destination c(4.3570677, 52.0115769)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The advantages of using &lt;code&gt;dplyr&lt;/code&gt; to manipulate spatial objects is more apparent when working with complex objects such as &lt;code&gt;countries_sf&lt;/code&gt; and using the pipe (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) to link commands. For example, if you want to look at the countries in South America, you can much more easily navigate the 241 rows and 63 columns of non-spatial data in the &lt;code&gt;sf&lt;/code&gt; version of the countries world map than the &lt;code&gt;sp&lt;/code&gt; version. Printing out the names of the columns with &lt;code&gt;colnames()&lt;/code&gt; shows that we can filter countries in South America through the &amp;ldquo;continent&amp;rdquo; column. We can simplify the non-spatial data by selecting only the &amp;ldquo;name&amp;rdquo; column to identify the countries. Even more impressively, it is possible to combine data wrangling commands with spatial transformations such as changing the CRS of the object with &lt;code&gt;st_transform()&lt;/code&gt;. As a demonstration, I can change the CRS of the subset of &lt;code&gt;countries_sf&lt;/code&gt; to use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mollweide_projection&#34;&gt;Mollweide projection&lt;/a&gt;, which prioritizes accuracy of area over shape and angle. The result of the pipeline of commands is a legible &lt;code&gt;sf&lt;/code&gt; object with 13 rows for the countries in South America with a new CRS. Note that because there is no EPSG code for the Mollweide projection the &lt;code&gt;epsg&lt;/code&gt; of the new object is &lt;code&gt;NA&lt;/code&gt;, but the &lt;code&gt;proj4string&lt;/code&gt; is changed to &lt;code&gt;+proj=moll&lt;/code&gt;. Notice too that the coordinates have been changed from degrees to meters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# South American countries with new CRS&lt;/span&gt;
countries_sf &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  filter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;continent &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;South America&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  select&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  st_transform&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;crs &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;+proj=moll +datum=WGS84&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## Simple feature collection with 13 features and 1 field
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -10204810 ymin: -6475765 xmax: -3470373 ymax: 1532816
## epsg (SRID):    NA
## proj4string:    +proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs
##            name                       geometry
## 1     Argentina MULTIPOLYGON (((-4588849.48...
## 2       Bolivia MULTIPOLYGON (((-5605494.25...
## 3        Brazil MULTIPOLYGON (((-4505021.68...
## 4         Chile MULTIPOLYGON (((-4714647.39...
## 5      Colombia MULTIPOLYGON (((-7824020.10...
## 6       Ecuador MULTIPOLYGON (((-8024338.62...
## 7  Falkland Is. MULTIPOLYGON (((-4403206.33...
## 8        Guyana MULTIPOLYGON (((-5715634.37...
## 9          Peru MULTIPOLYGON (((-7000354.19...
## 10     Paraguay MULTIPOLYGON (((-5605494.25...
## 11     Suriname MULTIPOLYGON (((-5413010.99...
## 12      Uruguay MULTIPOLYGON (((-4770885.41...
## 13    Venezuela MULTIPOLYGON (((-6068186.80...&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can even visualize this transformation of &lt;code&gt;countries_sf&lt;/code&gt; by piping directly to a base &lt;code&gt;plot()&lt;/code&gt; command. Like &lt;code&gt;sp&lt;/code&gt;, &lt;code&gt;sf&lt;/code&gt; has its own plotting methods, which differ slightly from the base plotting system.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:17&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:17&#34;&gt;17&lt;/a&gt;&lt;/sup&gt; The changes to the defaults that I make here are to remove the automatically created legend of country names with &lt;code&gt;key.pos = NULL&lt;/code&gt; and provide a title for the plot. I also add graticules, or grid lines along longitude and latitude, to more clearly show the effects of the change in projection. Before making the map, we need to return the color palette to its default settings to prevent the borders of the countries from being drawn in dark orchid.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Return to default palette&lt;/span&gt;
palette&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Map of South American countries&lt;/span&gt;
countries_sf &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  filter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;continent &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;South America&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  select&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  st_transform&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;crs &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;+proj=moll +datum=WGS84&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;key.pos &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; graticule &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; main &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;South America&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/gis-with-r-intro/sa-countries-1.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mapping-sf&#34;&gt;Mapping with &lt;code&gt;sf&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Returning to the example of the correspondence of Daniel van der Meulen, it would be possible to use &lt;code&gt;sf&lt;/code&gt; to recreate the base R plots made with the &lt;code&gt;sp&lt;/code&gt; package. However, another advantage of &lt;code&gt;sf&lt;/code&gt; is that it works with &lt;code&gt;ggplot2&lt;/code&gt;, and so I will concentrate on making maps using the &lt;code&gt;ggplot2&lt;/code&gt; system similar to those I made with &lt;code&gt;ggmap&lt;/code&gt; in &lt;a href=&#34;https://www.jessesadler.com/post/geocoding-with-r/#mapping-data&#34;&gt;a previous post&lt;/a&gt;. &lt;code&gt;ggplot2&lt;/code&gt; implements the plotting of &lt;code&gt;sf&lt;/code&gt; objects through the creation of a specific geom, &lt;code&gt;geom_sf()&lt;/code&gt;. &lt;code&gt;geom_sf()&lt;/code&gt; is only available in versions of &lt;code&gt;ggplot2&lt;/code&gt; that are greater than 2.2.1, which is the current CRAN version. Therefore, you need to download the development version of &lt;code&gt;ggplot2&lt;/code&gt; with &lt;code&gt;devtools::install_github(&amp;quot;tidyverse/ggplot2&amp;quot;)&lt;/code&gt; to plot &lt;code&gt;sf&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;The manner in which &lt;code&gt;ggplot2&lt;/code&gt; creates a plot through a single command rather than a series of separate commands as in base plots means that we need to explicitly deal with the incongruence in the geographic extent of &lt;code&gt;points_sf&lt;/code&gt; and the background maps. If you make a &lt;code&gt;ggplot2&lt;/code&gt; plot with &lt;code&gt;points_sf&lt;/code&gt; and &lt;code&gt;coast_sf&lt;/code&gt; without modifications, you will get a wold map with some small points in western Europe. There are two ways to deal with this incongruence by either changing the bounding box of the background map before making the plot or within the plot itself. As far as I know, there is no equivalent method in the &lt;code&gt;sf&lt;/code&gt; package to the command we used above to modify the &lt;code&gt;bbox&lt;/code&gt; slot of the &lt;code&gt;countries_sp&lt;/code&gt; object. However, it is possible to geographically subset an &lt;code&gt;sf&lt;/code&gt; object by a bounding box of coordinates using the &lt;code&gt;ms_clip()&lt;/code&gt; function from the &lt;a href=&#34;https://cran.r-project.org/web/packages/rmapshaper/&#34;&gt;&lt;code&gt;rmapshaper&lt;/code&gt;&lt;/a&gt; package. The other option is to leave &lt;code&gt;coast_sf&lt;/code&gt; and &lt;code&gt;countries_sf&lt;/code&gt; as they are and adjust the geographic extent of the objects in the plot command itself with the &lt;code&gt;coord_sf()&lt;/code&gt; function and the &lt;code&gt;xlim&lt;/code&gt; and &lt;code&gt;ylim&lt;/code&gt; arguments. Here, I will use the latter method.&lt;/p&gt;

&lt;p&gt;There are some oddities in using &lt;code&gt;geom_sf()&lt;/code&gt; compared to other geoms due to the character of &lt;code&gt;geom_sf()&lt;/code&gt;. By its nature, &lt;code&gt;geom_sf()&lt;/code&gt; is unlike other geoms in that it can be used to create points, lines, or polygons depending on the contents of the &lt;code&gt;sf&lt;/code&gt; object. This variability results in the need to declare the geometrical object used in a &lt;code&gt;show.legend&lt;/code&gt; argument for the legend to be properly formatted. Another difference that I have found from other geoms is that &lt;code&gt;geom_sf()&lt;/code&gt; does not properly identify &lt;code&gt;sf&lt;/code&gt; objects unless you explicitly identify them with &lt;code&gt;data = sf_object&lt;/code&gt;. While these issues are something to be aware of, they do not substantively affect the the plots that we can create.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by creating a simple plot using &lt;code&gt;ggplot2&lt;/code&gt; with &lt;code&gt;points_sf&lt;/code&gt; and &lt;code&gt;coast_sf&lt;/code&gt;. Note the explicit vocabulary to identify the &lt;code&gt;sf&lt;/code&gt; objects as the data and the use of &lt;code&gt;show.legend = &amp;quot;point&amp;quot;&lt;/code&gt; for the legend. Otherwise the plot recreates the basic structure of the above base R plots by mapping the aesthetics of &lt;code&gt;color&lt;/code&gt; to the &amp;ldquo;type&amp;rdquo; variable and &lt;code&gt;size&lt;/code&gt; to &amp;ldquo;n&amp;rdquo;. Some transparency is added to all of the points with the &lt;code&gt;alpha&lt;/code&gt; argument. The last change is to subset the geographic region of the plot, and thus of &lt;code&gt;coast_sf&lt;/code&gt; to a chosen bounding box with &lt;code&gt;coord_sf()&lt;/code&gt;. You can experiment with different values for &lt;code&gt;xlim&lt;/code&gt; and &lt;code&gt;ylim&lt;/code&gt; to see what works best.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggplot&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; coast_sf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; points_sf&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; type&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
          alpha &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          show.legend &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  coord_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;xlim &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; ylim &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/gis-with-r-intro/ggplot-demo-1.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The map created by &lt;code&gt;ggplot2&lt;/code&gt; shows the same information as the base plots. It includes legends by default so that we do not need to build them up from scratch, though with &lt;code&gt;geom_sf()&lt;/code&gt; we do need to use &lt;code&gt;show.legend = &amp;quot;point&amp;quot;&lt;/code&gt; to format the legends properly. The aesthetics of this map are quite different from the base plots and serves to show the defaults that come with the use of &lt;code&gt;geom_sf()&lt;/code&gt; in &lt;code&gt;ggplot2&lt;/code&gt;. The defaults for &lt;code&gt;geom_sf()&lt;/code&gt; use the iconic &lt;code&gt;ggplot&lt;/code&gt; gray background, but instead of the usual white grid lines, graticules for the longitude and latitude are shown. Notice that the tick marks for the plot are correctly labeled in units of degrees longitude and latitude and that the axes are not labeled, as the context makes clear that the x-axis is latitude and the y-axis is longitude â at least if you remember which one is which.&lt;/p&gt;

&lt;p&gt;The basic structure of what we want is present in the above map, but we can improve upon it by adding some information and making aesthetic changes to the map. We can simplify the map and make it more similar to the above base R plots by removing the graticules, which can be done by passing &lt;code&gt;NA&lt;/code&gt; to the datum argument within the &lt;code&gt;coord_sf()&lt;/code&gt; function. On the other hand, it is possible to add information to the plot by labeling the points with &lt;code&gt;geom_text_repel()&lt;/code&gt; from the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggrepel/index.html&#34;&gt;&lt;code&gt;ggrepel&lt;/code&gt;&lt;/a&gt; package, which will ensure that the labels for the points do not overlap. &lt;code&gt;geom_text_repel()&lt;/code&gt; does not work with &lt;code&gt;sf&lt;/code&gt; objects, but because we have made no geographic transformations to the data, we can use the data from the &lt;code&gt;locations&lt;/code&gt; data frame to map the names of the locations to the longitude and latitude values.&lt;/p&gt;

&lt;p&gt;Further changes to the non-data aspects of the map can be made through the &lt;a href=&#34;http://r4ds.had.co.nz/graphics-for-communication.html&#34;&gt;theme system used by &lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;. We can alter the look of the map by choosing a different built in theme, changing individual elements of the aesthetics, or a combination of the two. You can play around with the theming system to create the look you want. In this case, I will make changes to the theme and to individual aspects of the plot. Changing the theme to &lt;code&gt;theme_minimal()&lt;/code&gt; changes the background to white, but it also adds axes labels, which we will want to remove. The labels for the axes, legends, and plot as a whole can be modified within the &lt;code&gt;labs()&lt;/code&gt; function. To remove the labeling of the axes for the plot I set the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; labels to &lt;code&gt;NULL&lt;/code&gt;. I also change the labels for the legends to give a more descriptive name to the size legend and use title case for the color legend. The last change I make is to increase the size of the points within the color legend with the &lt;code&gt;guides()&lt;/code&gt; function, increasing the size of the points to 6.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Load ggrepel package&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;ggrepel&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

ggplot&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; coast_sf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; points_sf&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
          aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; type&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
          alpha &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
          show.legend &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  coord_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;xlim &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; ylim &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
           datum &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# removes graticules&lt;/span&gt;
  geom_text_repel&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; locations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                  aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; place&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;title &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Correspondence of Daniel van der Meulen, 1585&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  guides&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; guide_legend&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;override.aes &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  theme_minimal&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/gis-with-r-intro/ggplot-coastline-1.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The result is a map that is much cleaner, and because of the points are labeled, more informative. We can reuse the thematic tweaks to create a plot with the countries background map to make it possible to fill in the land area as we did above. I will use the same gray scale for the colors to fill the polygons and for the lines of the polygons. The other change that I make in this plot is to use the &lt;code&gt;theme_bw()&lt;/code&gt;, which adds a border around the plot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggplot&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; countries_sf&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          fill &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; gray&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; gray&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; points_sf&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
          aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; type&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
          alpha &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
          show.legend &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  coord_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;xlim &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; ylim &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
           datum &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# removes graticules&lt;/span&gt;
  geom_text_repel&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; locations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                  aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; place&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;title &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Correspondence of Daniel van der Meulen, 1585&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  guides&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; guide_legend&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;override.aes &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  theme_bw&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/gis-with-r-intro/ggplot-countries-1.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This post has only scraped the surface of the power of the &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; packages and the more general GIS capabilities of R. My goal with this post has been to provide an understanding of the nature of spatial data, how &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; implement the creation of spatial objects in R, and some of the consequences of the implementation details for modifying and plotting &lt;code&gt;Spatial&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; objects. &lt;code&gt;sp&lt;/code&gt; and its complimentary packages have long provided a foundation to make R a viable GIS platform. The recent development of the &lt;code&gt;sf&lt;/code&gt; package has modernized the implementation of spatial data in R and made it possible to integrate spatial data into the tidyverse and &lt;code&gt;ggplot2&lt;/code&gt; plotting system. &lt;code&gt;sf&lt;/code&gt; has made it easier to work with spatial data in R by minimizing the distinction between spatial data and other forms of data you might deal with in R. There still remain uses for the &lt;code&gt;sp&lt;/code&gt; package, and I think it is helpful to see the distinction between the two packages to better understand both, but &lt;code&gt;sf&lt;/code&gt; is clearly the future for the representation of geographic vector data in R.&lt;/p&gt;

&lt;h2 id=&#34;gis-resources&#34;&gt;Additional resources for GIS with R&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The CRAN task view for &lt;a href=&#34;https://cran.r-project.org/web/views/Spatial.html&#34;&gt;Analysis of Spatial Data&lt;/a&gt; provides a good overview of the variety of packages that deal with GIS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sp&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;The best resource for learning more about the &lt;code&gt;sp&lt;/code&gt; package is Roger Bivand, Edzer Pebesma, and Virgilio GÃ³mez-Rubio, &lt;em&gt;Applied Spatial Data Analysis with R&lt;/em&gt; (2013).&lt;/li&gt;
&lt;li&gt;There are a number of good tutorials on working with &lt;code&gt;Spatial&lt;/code&gt; objects and a particularly useful resource is &lt;a href=&#34;http://www.nickeubank.com/gis-in-r/&#34;&gt;Nick Eubank&amp;rsquo;s, GIS in R&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sf&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/&#34;&gt;package vignettes for &lt;code&gt;sf&lt;/code&gt;&lt;/a&gt; are very helpful for providing an introduction to the package.&lt;/li&gt;
&lt;li&gt;The currently in development book &lt;a href=&#34;https://geocompr.robinlovelace.net&#34;&gt;Geocomputation with R by Robin Lovelace, Jakub Nowosad, Jannes Muenchow&lt;/a&gt; is already an invaluable resource and was of great use for writing this post.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://r-spatial.org&#34;&gt;R Spatial blog&lt;/a&gt; is a good place to keep up on developments of &lt;code&gt;sf&lt;/code&gt; and complimentary packages that have adopted the use of &lt;code&gt;sf&lt;/code&gt; objects.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://onlinelibrary.wiley.com/doi/10.1029/2012EO160003/abstract&#34;&gt;Edzer Pebesma, Daniel NÃ¼st, and Roger Bivand, &amp;ldquo;The R Software Environment in Reproducible Geoscientific Research,&amp;rdquo; &lt;em&gt;Eos&lt;/em&gt; 93 (2012): 163â164.&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;For a good general introduction to the use and history of GIS with R, see the working book &lt;a href=&#34;https://geocompr.robinlovelace.net&#34;&gt;Robin Lovelace, Jakub Nowosad, Jannes Muenchow, &lt;em&gt;Geocomputation with R&lt;/em&gt;&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://cran.r-project.org/doc/Rnews/Rnews_2005-2.pdf&#34;&gt;E. J. Pebesma and R. S. Bivand, &amp;ldquo;Classes and methods for spatial data in R,&amp;rdquo; &lt;em&gt;R News&lt;/em&gt; 5, no. 2 (2005): 9â13.&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;For more information on CRSs see &lt;a href=&#34;https://geocompr.robinlovelace.net/spatial-class.html#crs-intro&#34;&gt;Lovelace, Nowosad, and Muenchow, Geocomputation with R&lt;/a&gt; and Bivand, Pebesma, and GÃ³mez-Rubio, 84â91.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;The distance between degrees of longitude and latitude are only equal at the equator. Lines of longitude get progressively closer together as they approach the poles where they all meet. This variance means you cannot calculate distance between points with longitude and latitude values without the use of complex geometric models.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;The details of how &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; interface with the PROJ library are different, but this should not be something that most users will have to worry about. &lt;a href=&#34;https://github.com/r-spatial/sf/issues/280&#34;&gt;Â See the discussion in &lt;code&gt;sf&lt;/code&gt; issue 280&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;See chapter 2 of Bivand, Edzer Pebesma, and Virgilio GÃ³mez-Rubio for a more in depth discussion of &lt;code&gt;Spatial&lt;/code&gt; objects.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;See the vignette &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/vignettes/sf1.html&#34;&gt;1. Simple Features for R&lt;/a&gt; and the very good discussion of &lt;code&gt;sf&lt;/code&gt; objects in chapter 2 of &lt;a href=&#34;https://geocompr.robinlovelace.net/spatial-class.html#sf-classes&#34;&gt;Lovelace, Nowosad, and Muenchow, &lt;em&gt;Geocomputation with R&lt;/em&gt;&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9&#34;&gt;On factors see &lt;a href=&#34;http://r4ds.had.co.nz/factors.html&#34;&gt;chapter 15 of Garrett Grolemund and Hadley Wickham, &lt;em&gt;R for Data Science&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://dx.doi.org/10.7287/peerj.preprints.3163v2&#34;&gt;Amelia McNamara and Nicholas J Horton, &amp;ldquo;Wrangling Categorical Data in R&amp;rdquo;&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:10&#34;&gt;The &lt;code&gt;bbox&lt;/code&gt; slot will be created from the information provided by the other two slots.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11&#34;&gt;I could use the &lt;code&gt;geo_data&lt;/code&gt; data frame, but this would unnecessarily result in having the coordinates in both the &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;coords&lt;/code&gt; slots.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:12&#34;&gt;You may need to download these maps the first time that you use them.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:13&#34;&gt;Instead of choosing your own colors, you could use any of the number of R packages that provide color palettes such as &lt;a href=&#34;https://cran.r-project.org/web/packages/RColorBrewer/index.html&#34;&gt;&lt;code&gt;RColorBrewer&lt;/code&gt;&lt;/a&gt;, but for this example I will keep it simple and make my own palette.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:13&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:14&#34;&gt;Make sure to create the &lt;code&gt;pointsize&lt;/code&gt; vector before beginning the chain of &lt;code&gt;plot()&lt;/code&gt; functions.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:14&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:15&#34;&gt;I rerun the &lt;code&gt;par()&lt;/code&gt; command for the margins to ensure that the margins stay consistent across these plots.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:15&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:16&#34;&gt;The &lt;code&gt;sf&lt;/code&gt; package has the ability to read in and convert a number of spatial data types used in GIS with &lt;code&gt;st_read()&lt;/code&gt;. &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/vignettes/sf2.html&#34;&gt;See the vignette on reading and writing simple features&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:16&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:17&#34;&gt;The details of plotting &lt;code&gt;sf&lt;/code&gt; objects are covered in a &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/vignettes/sf5.html&#34;&gt;package vignette&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:17&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Network Analysis with R</title>
      <link>/2017/10/25/introduction-to-network-analysis-with-r/</link>
      <pubDate>Wed, 25 Oct 2017 13:03:12 -0700</pubDate>
      
      <guid>/2017/10/25/introduction-to-network-analysis-with-r/</guid>
      <description>&lt;p&gt;Over a wide range of fields network analysis has become an increasingly popular tool for scholars to deal with the complexity of the interrelationships between actors of all sorts. The promise of network analysis is the placement of significance on the relationships between actors, rather than seeing actors as isolated entities. The emphasis on complexity, along with the creation of a variety of algorithms to measure various aspects of networks, makes network analysis a central tool for digital humanities.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; This post will provide an introduction to working with networks in &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt;, using the example of the network of cities in the correspondence of &lt;a href=&#34;https://jessesadler.com/project/dvdm-correspondence/&#34;&gt;Daniel van der Meulen&lt;/a&gt; in 1585.&lt;/p&gt;

&lt;p&gt;There are a number of applications designed for network analysis and the creation of network graphs such as &lt;a href=&#34;https://gephi.org&#34;&gt;gephi&lt;/a&gt; and &lt;a href=&#34;http://cytoscape.org&#34;&gt;cytoscape&lt;/a&gt;. Though not specifically designed for it, R has developed into a powerful tool for network analysis. The strength of R in comparison to stand-alone network analysis software is three fold. In the first place, &lt;a href=&#34;https://jessesadler.com/post/excel-vs-r/&#34;&gt;R enables reproducible research&lt;/a&gt; that is not possible with GUI applications. Secondly, the data analysis power of R provides robust tools for manipulating data to prepare it for network analysis. Finally, there is an ever growing range of packages designed to make R a complete network analysis tool. Significant network analysis packages for R include the &lt;a href=&#34;http://www.statnet.org&#34;&gt;statnet suite&lt;/a&gt; of packages and &lt;a href=&#34;http://igraph.org&#34;&gt;&lt;code&gt;igraph&lt;/code&gt;&lt;/a&gt;. In addition, &lt;a href=&#34;http://www.data-imaginist.com&#34;&gt;Thomas Lin Pedersen&lt;/a&gt; has recently released the &lt;a href=&#34;https://cran.r-project.org/web/packages/tidygraph/index.html&#34;&gt;&lt;code&gt;tidygraph&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/ggraph/index.html&#34;&gt;&lt;code&gt;ggraph&lt;/code&gt;&lt;/a&gt; packages that leverage the power of &lt;code&gt;igraph&lt;/code&gt; in a manner consistent with the &lt;a href=&#34;http://www.tidyverse.org&#34;&gt;tidyverse&lt;/a&gt; workflow. R can also be used to make interactive network graphs with the &lt;a href=&#34;http://www.htmlwidgets.org&#34;&gt;htmlwidgets framework&lt;/a&gt; that translates R code to JavaScript.&lt;/p&gt;

&lt;p&gt;This post begins with a short introduction to the basic vocabulary of network analysis, followed by a discussion of the process for getting data into the proper structure for network analysis. The network analysis packages have all implemented their own object classes. In this post, I will show how to create the specific object classes for the statnet suite of packages with the &lt;a href=&#34;https://cran.r-project.org/web/packages/network/index.html&#34;&gt;&lt;code&gt;network&lt;/code&gt;&lt;/a&gt; package, as well as for &lt;code&gt;igraph&lt;/code&gt; and &lt;code&gt;tidygraph&lt;/code&gt;, which is based on the &lt;code&gt;igraph&lt;/code&gt; implementation. Finally, I will turn to the creation of interactive graphs with the &lt;a href=&#34;http://datastorm-open.github.io/visNetwork/&#34;&gt;&lt;code&gt;vizNetwork&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://christophergandrud.github.io/networkD3/&#34;&gt;&lt;code&gt;networkD3&lt;/code&gt;&lt;/a&gt; packages.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;nodes-edges&#34;&gt;Network Analysis: Nodes and Edges&lt;/h2&gt;

&lt;p&gt;The two primary aspects of networks are a multitude of separate entities and the connections between them. The vocabulary can be a bit technical and even inconsistent between different disciplines, packages, and software. The entities are referred to as &lt;strong&gt;nodes&lt;/strong&gt; or &lt;strong&gt;vertices&lt;/strong&gt; of a graph, while the connections are &lt;strong&gt;edges&lt;/strong&gt; or &lt;strong&gt;links&lt;/strong&gt;. In this post I will mainly use the nomenclature of nodes and edges except when discussing packages that use different vocabulary.&lt;/p&gt;

&lt;p&gt;The network analysis packages need data to be in a particular form to create the special type of object used by each package. The object classes for &lt;code&gt;network&lt;/code&gt;, &lt;code&gt;igraph&lt;/code&gt;, and &lt;code&gt;tidygraph&lt;/code&gt; are all based on adjacency matrices, also known as sociomatrices.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; An &lt;a href=&#34;https://en.wikipedia.org/wiki/Adjacency_matrix&#34;&gt;adjacency matrix&lt;/a&gt; is a square matrix in which the column and row names are the nodes of the network. Within the matrix a 1 indicates that there is a connection between the nodes, and a 0 indicates no connection. Adjacency matrices implement a very different data structure than data frames and do not fit within the &lt;a href=&#34;http://www.tidyverse.org&#34;&gt;tidyverse&lt;/a&gt; workflow that I have used in my previous posts. Helpfully, the specialized network objects can also be created from an edge-list data frame, which do fit in the tidyverse workflow. In this post I will stick to the data analysis techniques of the tidyverse to create edge lists, which will then be converted to the specific object classes for &lt;code&gt;network&lt;/code&gt;, &lt;code&gt;igraph&lt;/code&gt;, and &lt;code&gt;tidygraph&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;edge list&lt;/strong&gt; is a data frame that contains a minimum of two columns, one column of nodes that are the source of a connection and another column of nodes that are the target of the connection. The nodes in the data are identified by unique IDs. If the distinction between source and target is meaningful, the network is &lt;strong&gt;directed&lt;/strong&gt;. If the distinction is not meaningful, the network is &lt;strong&gt;undirected&lt;/strong&gt;. With the example of letters sent between cities, the distinction between source and target is clearly meaningful, and so the network is directed. For the examples below, I will name the source column as &amp;ldquo;for&amp;rdquo; and the target column as &amp;ldquo;to&amp;rdquo;. I will use integers beginning with one as node IDs.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; An edge list can also contain additional columns that describe &lt;strong&gt;attributes&lt;/strong&gt; of the edges such as a magnitude aspect for an edge. If the edges have a magnitude attribute the graph is considered &lt;strong&gt;weighted&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Edge lists contain all of the information necessary to create network objects, but sometimes it is preferable to also create a separate node list. At its simplest, a &lt;strong&gt;node list&lt;/strong&gt; is a data frame with a single column â which I will label as &amp;ldquo;id&amp;rdquo; â that lists the node IDs found in the edge list. The advantage of creating a separate node list is the ability to add attribute columns to the data frame such as the names of the nodes or any kind of groupings. Below I give an example of minimal edge and node lists created with the &lt;code&gt;tibble()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;tidyverse&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
edge_list &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; tibble&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;from &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; to &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
node_list &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; tibble&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;id &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

edge_list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 5 x 2
##    from    to
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     2
## 2     2     3
## 3     2     4
## 4     3     2
## 5     4     1&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;node_list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 4 x 1
##      id
##   &amp;lt;int&amp;gt;
## 1     1
## 2     2
## 3     3
## 4     4&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compare this to an adjacency matrix with the same data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;##   1 2 3 4
## 1 0 1 0 0
## 2 0 0 1 1
## 3 0 1 0 0
## 4 1 0 0 0&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;creating-edges-nodes&#34;&gt;Creating edge and node lists&lt;/h2&gt;

&lt;p&gt;To create network objects from the database of letters received by Daniel van der Meulen in 1585 I will make both an edge list and a node list. This will necessitate the use of the &lt;a href=&#34;http://dplyr.tidyverse.org&#34;&gt;dplyr&lt;/a&gt; package to manipulate the data frame of letters sent to Daniel and split it into two data frames ot &lt;a href=&#34;http://r4ds.had.co.nz/tibbles.html&#34;&gt;tibbles&lt;/a&gt; with the structure of edge and node lists. In this case, the nodes will be the cities from which Daniel&amp;rsquo;s correspondents sent him letters and the cities in which he received them. The node list will contain a &amp;ldquo;label&amp;rdquo; column, containing the names of the cities. The edge list will also have an attribute column that will show the amount of letters sent between each pair of cities. The workflow to create these objects will be similar to that I have used in my &lt;a href=&#34;https://jessesadler.com/post/excel-vs-r/&#34;&gt;brief introduction to R&lt;/a&gt; and in &lt;a href=&#34;https://jessesadler.com/post/geocoding-with-r/&#34;&gt;geocoding with R&lt;/a&gt;. If you would like to follow along, you can find the data used in this post and the R script used on &lt;a href=&#34;https://github.com/jessesadler/intro-to-r&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first step is to load the &lt;code&gt;tidyverse&lt;/code&gt; library to import and manipulate the data. Printing out the &lt;code&gt;letters&lt;/code&gt; data frame shows that it contains four columns: &amp;ldquo;writer&amp;rdquo;, &amp;ldquo;source&amp;rdquo;, &amp;ldquo;destination&amp;rdquo;, and &amp;ldquo;date&amp;rdquo;. In this example, we will only deal with the &amp;ldquo;source&amp;rdquo; and &amp;ldquo;destination&amp;rdquo; columns.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;tidyverse&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; read_csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;data/correspondence-data-1585.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 114 x 4
##                     writer  source destination       date
##                      &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;     &amp;lt;date&amp;gt;
##  1 Meulen, Andries van der Antwerp       Delft 1585-01-03
##  2 Meulen, Andries van der Antwerp     Haarlem 1585-01-09
##  3 Meulen, Andries van der Antwerp     Haarlem 1585-01-11
##  4 Meulen, Andries van der Antwerp       Delft 1585-01-12
##  5 Meulen, Andries van der Antwerp     Haarlem 1585-01-12
##  6 Meulen, Andries van der Antwerp       Delft 1585-01-17
##  7 Meulen, Andries van der Antwerp       Delft 1585-01-22
##  8 Meulen, Andries van der Antwerp       Delft 1585-01-23
##  9    Della Faille, Marten Antwerp     Haarlem 1585-01-24
## 10 Meulen, Andries van der Antwerp       Delft 1585-01-28
## # ... with 104 more rows&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;node-list&#34;&gt;Node list&lt;/h3&gt;

&lt;p&gt;The workflow to create a node list is similar to the one I used to get the &lt;a href=&#34;https://jessesadler.com/post/geocoding-with-r/#preparing-data&#34;&gt;list of cities in order to geocode the data&lt;/a&gt; in a previous post. We want to get the distinct cities from both the &amp;ldquo;source&amp;rdquo; and &amp;ldquo;destination&amp;rdquo; columns and then join the information from these columns together. In the example below, I slightly change the commands from those I used in the previous post to have the name for the columns with the city names be the same for both the &lt;code&gt;sources&lt;/code&gt; and &lt;code&gt;destinations&lt;/code&gt; data frames to simplify the &lt;code&gt;full_join()&lt;/code&gt; function. I rename the column with the city names as &amp;ldquo;label&amp;rdquo; to adopt the vocabulary used by network analysis packages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;sources &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  rename&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

destinations &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;destination&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  rename&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; destination&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create a single dataframe with a column with the unique locations we need to use a &lt;a href=&#34;http://r4ds.had.co.nz/relational-data.html#outer-join&#34;&gt;full join&lt;/a&gt;, because we want to include all unique places from both the sources of the letters and the destinations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;nodes &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; full_join&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sources&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; destinations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
nodes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 13 x 1
##         label
##         &amp;lt;chr&amp;gt;
##  1    Antwerp
##  2    Haarlem
##  3  Dordrecht
##  4     Venice
##  5      Lisse
##  6   Het Vlie
##  7    Hamburg
##  8      Emden
##  9  Amsterdam
## 10      Delft
## 11  The Hague
## 12 Middelburg
## 13     Bremen&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This results in a data frame with one variable. However, the variable contained in the data frame is not really what we are looking for. The &amp;ldquo;label&amp;rdquo; column contains the names of the nodes, but we also want to have unique IDs for each city. We can do this by adding an &amp;ldquo;id&amp;rdquo; column to the &lt;code&gt;nodes&lt;/code&gt; data frame that contains numbers from one to whatever the total number of rows in the data frame is. A helpful function for this workflow is &lt;code&gt;rowid_to_column()&lt;/code&gt;, which adds a column with the values from the row ids and places the column at the start of the data frame.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; Note that &lt;code&gt;rowid_to_column()&lt;/code&gt; is a pipeable command, and so it is possible to do the &lt;code&gt;full_join()&lt;/code&gt; and add the &amp;ldquo;id&amp;rdquo; column in a single command. The result is a nodes list with an ID column and a label attribute.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;nodes &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; nodes &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; rowid_to_column&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
nodes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 13 x 2
##       id      label
##    &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt;
##  1     1    Antwerp
##  2     2    Haarlem
##  3     3  Dordrecht
##  4     4     Venice
##  5     5      Lisse
##  6     6   Het Vlie
##  7     7    Hamburg
##  8     8      Emden
##  9     9  Amsterdam
## 10    10      Delft
## 11    11  The Hague
## 12    12 Middelburg
## 13    13     Bremen&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;edge-list&#34;&gt;Edge list&lt;/h3&gt;

&lt;p&gt;Creating an edge list is similar to the above, but it is complicated by the need to deal with two ID columns instead of one. We also want to create a weight column that will note the amount of letters sent between each set of nodes. To accomplish this I will use the same &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarise()&lt;/code&gt; workflow that I have &lt;a href=&#34;https://jessesadler.com/post/excel-vs-r/#the-pipe&#34;&gt;discussed in previous posts&lt;/a&gt;. The difference here is that we want to group the data frame by two columns â &amp;ldquo;source&amp;rdquo; and &amp;ldquo;destination&amp;rdquo; â instead of just one. Previously, I have named the column that counts the number of observations per group &amp;ldquo;count&amp;rdquo;, but here I adopt the nomenclature of network analysis and call it &amp;ldquo;weight&amp;rdquo;. The final command in the pipeline removes the grouping for the data frame instituted by the &lt;code&gt;group_by()&lt;/code&gt; function. This makes it easier to manipulate the resulting &lt;code&gt;per_route&lt;/code&gt; data frame unhindered.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;per_route &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;  
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; destination&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;weight &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  ungroup&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
per_route&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 15 x 3
##       source destination weight
##        &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
##  1 Amsterdam      Bremen      1
##  2   Antwerp       Delft     68
##  3   Antwerp     Haarlem      5
##  4   Antwerp  Middelburg      1
##  5   Antwerp   The Hague      2
##  6 Dordrecht     Haarlem      1
##  7     Emden      Bremen      1
##  8   Haarlem      Bremen      2
##  9   Haarlem       Delft     26
## 10   Haarlem  Middelburg      1
## 11   Haarlem   The Hague      1
## 12   Hamburg      Bremen      1
## 13  Het Vlie      Bremen      1
## 14     Lisse       Delft      1
## 15    Venice     Haarlem      2&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like the node list, &lt;code&gt;per_route&lt;/code&gt; now has the basic form that we want, but we again have the problem that the &amp;ldquo;source&amp;rdquo; and &amp;ldquo;destination&amp;rdquo; columns contain labels rather than IDs. What we need to do is link the IDs that have been assigned in &lt;code&gt;nodes&lt;/code&gt; to each location in both the &amp;ldquo;source&amp;rdquo; and &amp;ldquo;destination&amp;rdquo; columns. This can be accomplished with another join function. In fact, it is necessary to perform two joins, one for the &amp;ldquo;source&amp;rdquo; column and one for &amp;ldquo;destination.&amp;rdquo; In this case, I will use a &lt;code&gt;left_join()&lt;/code&gt; with &lt;code&gt;per_route&lt;/code&gt; as the left data frame, because we want to maintain the number of rows in &lt;code&gt;per_route&lt;/code&gt;. While doing the &lt;code&gt;left_join&lt;/code&gt;, we also want to rename the two &amp;ldquo;id&amp;rdquo; columns that are brought over from &lt;code&gt;nodes&lt;/code&gt;. For the join using the &amp;ldquo;source&amp;rdquo; column I will rename the column as &amp;ldquo;from&amp;rdquo;. The column brought over from the &amp;ldquo;destination&amp;rdquo; join is renamed &amp;ldquo;to&amp;rdquo;. It would be possible to do both joins in a single command with the use of the pipe. However, for clarity, I will perform the joins in two separate commands. Because the join is done across two commands, notice that the data frame at the beginning of the pipeline changes from &lt;code&gt;per_route&lt;/code&gt; to &lt;code&gt;edges&lt;/code&gt;, which is created by the first command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;edges &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; per_route &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  left_join&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;nodes&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  rename&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;from &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; id&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

edges &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; edges &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  left_join&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;nodes&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  rename&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;to &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; id&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that &lt;code&gt;edges&lt;/code&gt; has &amp;ldquo;from&amp;rdquo; and &amp;ldquo;to&amp;rdquo; columns with node IDs, we need to reorder the columns to bring &amp;ldquo;from&amp;rdquo; and &amp;ldquo;to&amp;rdquo; to the left of the data frame. Currently, the &lt;code&gt;edges&lt;/code&gt; data frame still contains the &amp;ldquo;source&amp;rdquo; and &amp;ldquo;destination&amp;rdquo; columns with the names of the cities that correspond with the IDs. However, this data is superfluous, since it is already present in &lt;code&gt;nodes&lt;/code&gt;. Therefore, I will only include the &amp;ldquo;from&amp;rdquo;, &amp;ldquo;to&amp;rdquo;, and &amp;ldquo;weight&amp;rdquo; columns in the &lt;code&gt;select()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;edges &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; select&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;edges&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; from&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; to&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; weight&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
edges&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 15 x 3
##     from    to weight
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
##  1     9    13      1
##  2     1    10     68
##  3     1     2      5
##  4     1    12      1
##  5     1    11      2
##  6     3     2      1
##  7     8    13      1
##  8     2    13      2
##  9     2    10     26
## 10     2    12      1
## 11     2    11      1
## 12     7    13      1
## 13     6    13      1
## 14     5    10      1
## 15     4     2      2&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;edges&lt;/code&gt; data frame does not look very impressive; it is three columns of integers. However, &lt;code&gt;edges&lt;/code&gt; combined with &lt;code&gt;nodes&lt;/code&gt; provides us with all of the information necessary to create network objects with the &lt;code&gt;network&lt;/code&gt;, &lt;code&gt;igraph&lt;/code&gt;, and &lt;code&gt;tidygraph&lt;/code&gt; packages.&lt;/p&gt;

&lt;h2 id=&#34;network-objects&#34;&gt;Creating network objects&lt;/h2&gt;

&lt;p&gt;The network object classes for &lt;code&gt;network&lt;/code&gt;, &lt;code&gt;igraph&lt;/code&gt;, and &lt;code&gt;tidygraph&lt;/code&gt; are all closely related. It is possible to translate between a &lt;code&gt;network&lt;/code&gt; object and an &lt;code&gt;igraph&lt;/code&gt; object. However, it is best to keep the two packages and their objects separate. In fact, the capabilities of &lt;code&gt;network&lt;/code&gt; and &lt;code&gt;igraph&lt;/code&gt; overlap to such an extent that it is best practice to have only one of the packages loaded at a time. I will begin by going over the &lt;code&gt;network&lt;/code&gt; package and then move to the &lt;code&gt;igraph&lt;/code&gt; and &lt;code&gt;tidygraph&lt;/code&gt; packages.&lt;/p&gt;

&lt;h3 id=&#34;network-package&#34;&gt;network&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;network&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function used to create a &lt;code&gt;network&lt;/code&gt; object is &lt;code&gt;network()&lt;/code&gt;. The command is not particularly straight forward, but you can always enter &lt;code&gt;?network()&lt;/code&gt; into the console if you get confused. The first argument is â as stated in the documentation â &amp;ldquo;a matrix giving the network structure in adjacency, incidence, or edgelist form.&amp;rdquo; The language demonstrates the significance of matrices in network analysis, but instead of a matrix, we have an edge list, which fills the same role. The second argument is a list of vertex attributes, which corresponds to the nodes list. Notice that the &lt;code&gt;network&lt;/code&gt; package uses the nomenclature of vertices instead of nodes. The same is true of &lt;code&gt;igraph&lt;/code&gt;. We then need to specify the type of data that has been entered into the first two arguments by specifying that the &lt;code&gt;matrix.type&lt;/code&gt; is an &lt;code&gt;&amp;quot;edgelist&amp;quot;&lt;/code&gt;. Finally, we set &lt;code&gt;ignore.eval&lt;/code&gt; to &lt;code&gt;FALSE&lt;/code&gt; so that our network can be weighted and take into account the number of letters along each route.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;routes_network &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; network&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;edges&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; vertex.attr &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; nodes&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; matrix.type &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;edgelist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; ignore.eval &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see the type of object created by the &lt;code&gt;network()&lt;/code&gt; function by placing &lt;code&gt;routes_network&lt;/code&gt; in the &lt;code&gt;class()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kp&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_network&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;network&amp;#34;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Printing out &lt;code&gt;routes_network&lt;/code&gt; to the console shows that the structure of the object is quite different from data-frame style objects such as &lt;code&gt;edges&lt;/code&gt; and &lt;code&gt;nodes&lt;/code&gt;. The print command reveals information that is specifically defined for network analysis. It shows that there are 13 vertices or nodes and 15 edges in &lt;code&gt;routes_network&lt;/code&gt;. These numbers correspond to the number of rows in &lt;code&gt;nodes&lt;/code&gt; and &lt;code&gt;edges&lt;/code&gt; respectively. We can also see that the vertices and edges both contain attributes such as label and weight. You can get even more information, including a sociomatrix of the data, by entering &lt;code&gt;summary(routes_network)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;routes_network&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;##  Network attributes:
##   vertices = 13 
##   directed = TRUE 
##   hyper = FALSE 
##   loops = FALSE 
##   multiple = FALSE 
##   bipartite = FALSE 
##   total edges= 15 
##     missing edges= 0 
##     non-missing edges= 15 
## 
##  Vertex attribute names: 
##     id label vertex.names 
## 
##  Edge attribute names: 
##     weight&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is now possible to get a rudimentary, if not overly aesthetically pleasing, graph of our network of letters. Both the &lt;code&gt;network&lt;/code&gt; and &lt;code&gt;igraph&lt;/code&gt; packages use the &lt;a href=&#34;https://bookdown.org/rdpeng/exdata/the-base-plotting-system-1.html&#34;&gt;base plotting system of R&lt;/a&gt;. The conventions for base plots are significantly different from those of &lt;a href=&#34;http://ggplot2.tidyverse.org&#34;&gt;ggplot2&lt;/a&gt; â which I have discussed in &lt;a href=&#34;https://jessesadler.com/post/excel-vs-r/#ggplot&#34;&gt;previous&lt;/a&gt; &lt;a href=&#34;https://jessesadler.com/post/geocoding-with-r/#mapping-data&#34;&gt;posts&lt;/a&gt; â and so I will stick with rather simple plots instead of going into the details of creating complex plots with base R. In this case, the only change that I make to the default &lt;code&gt;plot()&lt;/code&gt; function for the &lt;code&gt;network&lt;/code&gt; package is to increase the size of nodes with the &lt;code&gt;vertex.cex&lt;/code&gt; argument to make the nodes more visible. Even with this very simple graph, we can already learn something about the data. The graph makes clear that there are two main groupings or clusters of the data, which correspond to the time Daniel spent in Holland in the first three-quarters of 1585 and after his move to Bremen in September.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_network&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; vertex.cex &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/network-analysis-with-r/network-plot.png&#34; height = &#34;400&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;plot()&lt;/code&gt; function with a &lt;code&gt;network&lt;/code&gt; object uses the Fruchterman and Reingold algorithm to decide on the placement of the nodes.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; You can change the layout algorithm with the &lt;code&gt;mode&lt;/code&gt; argument. Below, I layout the nodes in a circle. This is not a particularly useful arrangement for this network, but it gives an idea of some of the options available.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_network&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; vertex.cex &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; mode &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;circle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/network-analysis-with-r/network-circle-plot.png&#34; height = &#34;400&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;igraph-package&#34;&gt;igraph&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s now move on to discuss the &lt;code&gt;igraph&lt;/code&gt; package. First, we need to clean up the environment in R by removing the &lt;code&gt;network&lt;/code&gt; package so that it does not interfere with the &lt;code&gt;igraph&lt;/code&gt; commands. We might as well also remove &lt;code&gt;routes_network&lt;/code&gt; since we will not longer be using it. The &lt;code&gt;network&lt;/code&gt; package can be removed with the &lt;code&gt;detach()&lt;/code&gt; function, and &lt;code&gt;routes_network&lt;/code&gt; is removed with &lt;code&gt;rm()&lt;/code&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; After this, we can safely load &lt;code&gt;igraph&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;detach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;package&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;network&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;rm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_network&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;igraph&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create an &lt;code&gt;igraph&lt;/code&gt; object from an edge-list data frame we can use the &lt;code&gt;graph_from_data_frame()&lt;/code&gt; function, which is a bit more straight forward than &lt;code&gt;network()&lt;/code&gt;. There are three arguments in the &lt;code&gt;graph_from_data_frame()&lt;/code&gt; function: d, vertices, and directed. Here, d refers to the edge list, vertices to the node list, and directed can be either &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt; depending on whether the data is directed or undirected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;routes_igraph &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; graph_from_data_frame&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;d &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; edges&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; vertices &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; nodes&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; directed &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Printing the &lt;code&gt;igraph&lt;/code&gt; object created by &lt;code&gt;graph_from_data_frame()&lt;/code&gt; to the console reveals similar information to that from a &lt;code&gt;network&lt;/code&gt; object, though the structure is more cryptic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;routes_igraph&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## IGRAPH f84c784 DNW- 13 15 -- 
## + attr: name (v/c), label (v/c), weight (e/n)
## + edges from f84c784 (vertex names):
##  [1] 9-&amp;gt;13 1-&amp;gt;10 1-&amp;gt;2  1-&amp;gt;12 1-&amp;gt;11 3-&amp;gt;2  8-&amp;gt;13 2-&amp;gt;13 2-&amp;gt;10 2-&amp;gt;12 2-&amp;gt;11
## [12] 7-&amp;gt;13 6-&amp;gt;13 5-&amp;gt;10 4-&amp;gt;2&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main information about the object is contained in &lt;code&gt;DNW- 13 15 --&lt;/code&gt;. This tells that &lt;code&gt;routes_igraph&lt;/code&gt; is a directed network (D) that has a name attribute (N) and is weighted (W). The dash after W tells us that the graph is not &lt;a href=&#34;https://wikipedia.org/wiki/Bipartite_graph&#34;&gt;bipartite&lt;/a&gt;. The numbers that follow describe the number of nodes and edges in the graph respectively. Next, &lt;code&gt;name (v/c), label (v/c), weight (e/n)&lt;/code&gt; gives information about the attributes of the graph. There are two vertex attributes (v/c) of name â which are the IDs â and labels and an edge attribute (e/n) of weight. Finally, there is a print out of all of the edges.&lt;/p&gt;

&lt;p&gt;Just as with the &lt;code&gt;network&lt;/code&gt; package, we can create a plot with an &lt;code&gt;igraph&lt;/code&gt; object through the &lt;code&gt;plot()&lt;/code&gt; function. The only change that I make to the default here is to decrease the size of the arrows. By default &lt;code&gt;igraph&lt;/code&gt; labels the nodes with the label column if there is one or with the IDs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_igraph&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; edge.arrow.size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/network-analysis-with-r/igraph-plot.png&#34; height = &#34;400&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Like the &lt;code&gt;network&lt;/code&gt; graph before, the default of an &lt;code&gt;igraph&lt;/code&gt; plot is not particularly aesthetically pleasing, but all aspects of the plots can be manipulated. Here, I just want to change the layout of the nodes to use the graphopt algorithm created by &lt;a href=&#34;http://www.schmuhl.org/graphopt/&#34;&gt;Michael Schmuhl&lt;/a&gt;. This algorithm makes it easier to see the relationship between Haarlem, Antwerp, and Delft, which are three of the most signifiant locations in the correspondence network, by spreading them out further.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;plot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_igraph&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; layout &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; layout_with_graphopt&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; edge.arrow.size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/network-analysis-with-r/igraph-graphopt-plot.png&#34; height = &#34;400&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;tidygraph-ggraph&#34;&gt;tidygraph and ggraph&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;tidygraph&lt;/code&gt; and &lt;code&gt;ggraph&lt;/code&gt; packages are newcomers to the network analysis landscape, but together the two packages provide real advantages over the &lt;code&gt;network&lt;/code&gt; and &lt;code&gt;igraph&lt;/code&gt; packages. &lt;code&gt;tidygraph&lt;/code&gt; and &lt;code&gt;ggraph&lt;/code&gt; represent an attempt to &lt;a href=&#34;http://www.data-imaginist.com/2017/Introducing-tidygraph/&#34;&gt;bring network analysis into the tidyverse workflow&lt;/a&gt;. &lt;a href=&#34;https://cran.r-project.org/web/packages/tidygraph/index.html&#34;&gt;&lt;code&gt;tidygraph&lt;/code&gt;&lt;/a&gt; provides a way to create a network object that more closely resembles a &lt;a href=&#34;http://r4ds.had.co.nz/tibbles.html&#34;&gt;tibble or data frame&lt;/a&gt;. This makes it possible to use many of the &lt;code&gt;dplyr&lt;/code&gt; functions to manipulate network data. &lt;a href=&#34;https://cran.r-project.org/web/packages/ggraph/index.html&#34;&gt;&lt;code&gt;ggraph&lt;/code&gt;&lt;/a&gt; gives a way to plot network graphs using the conventions and power of &lt;code&gt;ggplot2&lt;/code&gt;. In other words, &lt;code&gt;tidygraph&lt;/code&gt; and &lt;code&gt;ggraph&lt;/code&gt; allow you to deal with network objects in a manner that is more consistent with the commands used for working with tibbles and data frames. However, the true promise of &lt;code&gt;tidygraph&lt;/code&gt; and &lt;code&gt;ggraph&lt;/code&gt; is that they leverage the power of &lt;code&gt;igraph&lt;/code&gt;. This means that you sacrifice few of the network analysis capabilities of &lt;code&gt;igraph&lt;/code&gt; by using &lt;code&gt;tidygraph&lt;/code&gt; and &lt;code&gt;ggraph&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We need to start as always by loading the necessary packages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;tidygraph&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;ggraph&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, let&amp;rsquo;s create a network object using &lt;code&gt;tidygraph&lt;/code&gt;, which is called a &lt;code&gt;tbl_graph&lt;/code&gt;. A &lt;code&gt;tbl_graph&lt;/code&gt; consists of two tibbles: an edges tibble and a nodes tibble. Conveniently, the &lt;code&gt;tbl_graph&lt;/code&gt; object class is a wrapper around an &lt;code&gt;igraph&lt;/code&gt; object, meaning that at its basis a &lt;code&gt;tbl_graph&lt;/code&gt; object is essentially an &lt;code&gt;igraph&lt;/code&gt; object.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; The close link between &lt;code&gt;tbl_graph&lt;/code&gt; and &lt;code&gt;igraph&lt;/code&gt; objects results in two main ways to create a &lt;code&gt;tbl_graph&lt;/code&gt; object. The first is to use an edge list and node list, using &lt;code&gt;tbl_graph()&lt;/code&gt;. The arguments for the function are almost identical to those of &lt;code&gt;graph_from_data_frame()&lt;/code&gt; with only a slight change to the names of the arguments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;routes_tidy &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; tbl_graph&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;nodes &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; nodes&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; edges &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; edges&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; directed &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second way to create a &lt;code&gt;tbl_graph&lt;/code&gt; object is to convert an &lt;code&gt;igraph&lt;/code&gt; or &lt;code&gt;network&lt;/code&gt; object using &lt;code&gt;as_tbl_graph()&lt;/code&gt;. Thus, we could convert &lt;code&gt;routes_igraph&lt;/code&gt; to a &lt;code&gt;tbl_graph&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;routes_igraph_tidy &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; as_tbl_graph&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_igraph&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have created two &lt;code&gt;tbl_graph&lt;/code&gt; objects, let&amp;rsquo;s inspect them with the &lt;code&gt;class()&lt;/code&gt; function. This shows that &lt;code&gt;routes_tidy&lt;/code&gt; and &lt;code&gt;routes_igraph_tidy&lt;/code&gt; are objects of class &lt;code&gt;&amp;quot;tbl_graph&amp;quot; &amp;quot;igraph&amp;quot;&lt;/code&gt;, while &lt;code&gt;routes_igraph&lt;/code&gt; is object class &lt;code&gt;&amp;quot;igraph&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kp&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_tidy&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;tbl_graph&amp;#34; &amp;#34;igraph&amp;#34;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kp&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_igraph_tidy&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;tbl_graph&amp;#34; &amp;#34;igraph&amp;#34;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kp&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_igraph&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] &amp;#34;igraph&amp;#34;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Printing out a &lt;code&gt;tbl_graph&lt;/code&gt; object to the console results in a drastically different output from that of an &lt;code&gt;igraph&lt;/code&gt; object. It is an output similar to that of a normal tibble.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;routes_tidy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tbl_graph: 13 nodes and 15 edges
## #
## # A directed acyclic simple graph with 1 component
## #
## # Node Data: 13 x 2 (active)
##      id     label
##   &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;
## 1     1   Antwerp
## 2     2   Haarlem
## 3     3 Dordrecht
## 4     4    Venice
## 5     5     Lisse
## 6     6  Het Vlie
## # ... with 7 more rows
## #
## # Edge Data: 15 x 3
##    from    to weight
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
## 1     9    13      1
## 2     1    10     68
## 3     1     2      5
## # ... with 12 more rows&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Printing &lt;code&gt;routes_tidy&lt;/code&gt; shows that it is a &lt;code&gt;tbl_graph&lt;/code&gt; object with 13 nodes and 15 edges. The command also prints the first six rows of &amp;ldquo;Node Data&amp;rdquo; and the first three of &amp;ldquo;Edge Data&amp;rdquo;. Notice too that it states that the Node Data is active. The notion of an active tibble within a &lt;code&gt;tbl_graph&lt;/code&gt; object makes it possible to manipulate the data in one tibble at a time. The nodes tibble is activated by default, but you can change which tibble is active with the &lt;code&gt;activate()&lt;/code&gt; function. Thus, if I wanted to rearrange the rows in the edges tibble to list those with the highest &amp;ldquo;weight&amp;rdquo; first, I could use &lt;code&gt;activate()&lt;/code&gt; and then &lt;code&gt;arrange()&lt;/code&gt;. Here I simply print out the result rather than saving it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;routes_tidy &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  activate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;edges&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  arrange&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;desc&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;weight&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tbl_graph: 13 nodes and 15 edges
## #
## # A directed acyclic simple graph with 1 component
## #
## # Edge Data: 15 x 3 (active)
##    from    to weight
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
## 1     1    10     68
## 2     2    10     26
## 3     1     2      5
## 4     1    11      2
## 5     2    13      2
## 6     4     2      2
## # ... with 9 more rows
## #
## # Node Data: 13 x 2
##      id     label
##   &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;
## 1     1   Antwerp
## 2     2   Haarlem
## 3     3 Dordrecht
## # ... with 10 more rows&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we do not need to further manipulate &lt;code&gt;routes_tidy&lt;/code&gt;, we can plot the graph with &lt;code&gt;ggraph&lt;/code&gt;. Like &lt;a href=&#34;https://jessesadler.com/post/geocoding-with-r/#mapping-data&#34;&gt;ggmap&lt;/a&gt;, &lt;code&gt;ggraph&lt;/code&gt; is an extension of &lt;code&gt;ggplot2&lt;/code&gt;, making it easier to carry over basic &lt;code&gt;ggplot&lt;/code&gt; skills to the creation of network plots. As in all network graphs, there are three main aspects to a &lt;code&gt;ggraph&lt;/code&gt; plot: &lt;a href=&#34;http://www.data-imaginist.com/2017/ggraph-introduction-nodes/&#34;&gt;nodes&lt;/a&gt;, &lt;a href=&#34;http://www.data-imaginist.com/2017/ggraph-introduction-edges/&#34;&gt;edges&lt;/a&gt;, and &lt;a href=&#34;http://www.data-imaginist.com/2017/ggraph-introduction-layouts/&#34;&gt;layouts&lt;/a&gt;. The &lt;a href=&#34;https://cran.r-project.org/web/packages/ggraph/index.html&#34;&gt;vignettes for the ggraph package&lt;/a&gt; helpfully cover the fundamental aspects of &lt;code&gt;ggraph&lt;/code&gt; plots. &lt;code&gt;ggraph&lt;/code&gt; adds special geoms to the basic set of &lt;code&gt;ggplot&lt;/code&gt; geoms that are specifically designed for networks. Thus, there is a set of &lt;code&gt;geom_node&lt;/code&gt; and &lt;code&gt;geom_edge&lt;/code&gt; geoms. The basic plotting function is &lt;code&gt;ggraph()&lt;/code&gt;, which takes the data to be used for the graph and the type of layout desired. Both of the arguments for &lt;code&gt;ggraph()&lt;/code&gt; are built around &lt;code&gt;igraph&lt;/code&gt;. Therefore, &lt;code&gt;ggraph()&lt;/code&gt; can use either an &lt;code&gt;igraph&lt;/code&gt; object or a &lt;code&gt;tbl_graph&lt;/code&gt; object. In addition, the available layouts algorithms primarily derive from &lt;code&gt;igraph&lt;/code&gt;. Lastly, &lt;code&gt;ggraph&lt;/code&gt; introduces a special &lt;code&gt;ggplot&lt;/code&gt; theme that provides better defaults for network graphs than the normal &lt;code&gt;ggplot&lt;/code&gt; defaults. The &lt;code&gt;ggraph&lt;/code&gt; theme can be set for a series of plots with the &lt;code&gt;set_graph_style()&lt;/code&gt; command run before the graphs are plotted or by using &lt;code&gt;theme_graph()&lt;/code&gt; in the individual plots. Here, I will use the latter method.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what a basic &lt;code&gt;ggraph&lt;/code&gt; plot looks like. The plot begins with &lt;code&gt;ggraph()&lt;/code&gt; and the data. I then add basic edge and node geoms. No arguments are necessary within the edge and node geoms, because they take the information from the data provided in &lt;code&gt;ggraph()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggraph&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_tidy&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; geom_edge_link&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; geom_node_point&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; theme_graph&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/network-analysis-with-r/ggraph-basic.png&#34; height = &#34;400&#34;/&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the structure of the command is similar to that of &lt;code&gt;ggplot&lt;/code&gt; with the separate layers added with the &lt;code&gt;+&lt;/code&gt; sign. The basic &lt;code&gt;ggraph&lt;/code&gt; plot looks similar to those of &lt;code&gt;network&lt;/code&gt; and &lt;code&gt;igraph&lt;/code&gt;, if not even plainer, but we can use similar commands to &lt;code&gt;ggplot&lt;/code&gt; to create a more informative graph. We can show the &amp;ldquo;weight&amp;rdquo; of the edges â or the amount of letters sent along each route â by using width in the &lt;code&gt;geom_edge_link()&lt;/code&gt; function. To get the width of the line to change according to the weight variable, we place the argument within an &lt;code&gt;aes()&lt;/code&gt; function. In order to control the maximum and minimum width of the edges, I use &lt;code&gt;scale_edge_width()&lt;/code&gt; and set a &lt;code&gt;range&lt;/code&gt;. I choose a relatively small width for the minimum, because there is a significant difference between the maximum and minimum number of letters sent along the routes. We can also label the nodes with the names of the locations since there are relatively few nodes. Conveniently, &lt;code&gt;geom_node_text()&lt;/code&gt; comes with a repel argument that ensures that the labels do not overlap with the nodes in a manner similar to the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggrepel/index.html&#34;&gt;ggrepel package&lt;/a&gt;. I add a bit of transparency to the edges with the alpha argument. I also use &lt;code&gt;labs()&lt;/code&gt; to relabel the legend &amp;ldquo;Letters&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggraph&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; layout &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;graphopt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_node_point&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_edge_link&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;width &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; weight&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; alpha &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  scale_edge_width&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;range &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_node_text&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; label&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; repel &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;edge_width &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  theme_graph&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/network-analysis-with-r/ggraph-graphopt.png&#34; height = &#34;400&#34;/&gt;&lt;/p&gt;

&lt;p&gt;In addition to the layout choices provided by &lt;code&gt;igraph&lt;/code&gt;, &lt;code&gt;ggraph&lt;/code&gt; also implements its own layouts. For example, you can use &lt;code&gt;ggraph&#39;s&lt;/code&gt; concept of &lt;a href=&#34;http://www.data-imaginist.com/2017/ggraph-introduction-layouts/&#34;&gt;circularity&lt;/a&gt; to create arc diagrams. Here, I layout the nodes in a horizontal line and have the edges drawn as arcs. Unlike the previous plot, this graph indicates directionality of the edges.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; The edges above the horizontal line move from left to right, while the edges below the line move from right to left. Intsead of adding points for the nodes, I just include the label names. I use the same width aesthetic to denote the difference in the weight of each edge. Note that in this plot I use an &lt;code&gt;igraph&lt;/code&gt; object as the data for the graph, which makes no practical difference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggraph&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;routes_igraph&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; layout &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;linear&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_edge_arc&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;width &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; weight&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; alpha &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  scale_edge_width&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;range &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_node_text&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; label&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;edge_width &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  theme_graph&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/network-analysis-with-r/ggraph-arc.png&#34; height = &#34;450&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;visnetwork-network&#34;&gt;Interactive network graphs with &lt;code&gt;visNetwork&lt;/code&gt; and &lt;code&gt;networkD3&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.htmlwidgets.org&#34;&gt;htmlwidgets&lt;/a&gt; set of packages makes it possible to use R to create interactive JavaScript visualizations. Here, I will show how to make graphs with the &lt;a href=&#34;http://datastorm-open.github.io/visNetwork/&#34;&gt;&lt;code&gt;visNetwork&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://christophergandrud.github.io/networkD3/&#34;&gt;&lt;code&gt;networkD3&lt;/code&gt;&lt;/a&gt; packages. These two packages use different JavaScript libraries to create their graphs. &lt;code&gt;visNetwork&lt;/code&gt; uses &lt;a href=&#34;http://visjs.org/&#34;&gt;vis.js&lt;/a&gt;, while &lt;code&gt;networkD3&lt;/code&gt; uses the popular &lt;a href=&#34;http://d3js.org/&#34;&gt;d3 visualization library&lt;/a&gt; to make its graphs. One difficulty in working with both &lt;code&gt;visNetwork&lt;/code&gt; and &lt;code&gt;networkD3&lt;/code&gt; is that they expect edge lists and node lists to use specific nomenclature. The above data manipulation conforms to the basic structure for &lt;code&gt;visNetwork&lt;/code&gt;, but some work will need to be done for &lt;code&gt;networkD3&lt;/code&gt;. Despite this inconvenience, both packages possess a wide range of graphing capabilities and both can work with &lt;code&gt;igraph&lt;/code&gt; objects and layouts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;visNetwork&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;networkD3&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;visnetwork-package&#34;&gt;visNetwork&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;visNetwork()&lt;/code&gt; function uses a nodes list and edges list to create an interactive graph. The nodes list must include an &amp;ldquo;id&amp;rdquo; column, and the edge list must have &amp;ldquo;from&amp;rdquo; and &amp;ldquo;to&amp;rdquo; columns. The function also plots the labels for the nodes, using the names of the cities from the &amp;ldquo;label&amp;rdquo; column in the node list. The resulting graph is fun to play around with. You can move the nodes and the graph will use an algorithm to keep the nodes properly spaced. You can also zoom in and out on the plot and move it around to re-center it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;visNetwork&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;nodes&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; edges&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;iframe src=&#34;../../img/network-analysis-with-r/visnetwork-simple.html&#34; width = &#34;100%&#34; height = &#34;500&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;code&gt;visNetwork&lt;/code&gt; can use &lt;code&gt;igraph&lt;/code&gt; layouts, providing a large variety of possible layouts. In addition, you can use &lt;code&gt;visIgraph()&lt;/code&gt; to plot an &lt;code&gt;igraph&lt;/code&gt; object directly. Here, I will stick with the &lt;code&gt;nodes&lt;/code&gt; and &lt;code&gt;edges&lt;/code&gt; workflow and use an &lt;code&gt;igraph&lt;/code&gt; layout to customize the graph. I will also add a variable to change the width of the edge as we did with &lt;code&gt;ggraph&lt;/code&gt;. &lt;code&gt;visNetwork()&lt;/code&gt; uses column names from the edge and node lists to plot network attributes instead of arguments within the function call. This means that it is necessary to do some data manipulation to get a &amp;ldquo;width&amp;rdquo; column in the edge list. The width attribute for &lt;code&gt;visNetwork()&lt;/code&gt; does not scale the values, so we have to do this manually. Both of these actions can be done with the &lt;code&gt;mutate()&lt;/code&gt; function and some simple arithmetic. Here, I create a new column in &lt;code&gt;edges&lt;/code&gt; and scale the weight values by dividing by 5. Adding 1 to the result provides a way to create a minimum width.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;edges &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;edges&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; width &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; weight&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is done, we can create a graph with variable edge widths. I also choose a layout algorithm from &lt;code&gt;igraph&lt;/code&gt; and add arrows to the edges, placing them in the middle of the edge.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;visNetwork&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;nodes&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; edges&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  visIgraphLayout&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;layout &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;layout_with_fr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  visEdges&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;arrows &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;middle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;iframe src=&#34;../../img/network-analysis-with-r/visnetwork-edgewidth.html&#34; width = &#34;100%&#34; height = &#34;500&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;networkd3-package&#34;&gt;networkD3&lt;/h3&gt;

&lt;p&gt;A little more work is necessary to prepare the data to create a &lt;code&gt;networkD3&lt;/code&gt; graph. To make a &lt;code&gt;networkD3&lt;/code&gt; graph with a edge and node list requires that the IDs be a series of numeric integers that begin with 0. Currently, the node IDs for our data begin with 1, and so we have to do a bit of data manipulation. It is possible to renumber the nodes by subtracting 1 from the ID columns in the &lt;code&gt;nodes&lt;/code&gt; and &lt;code&gt;edges&lt;/code&gt; data frames. Once again, this can be done with the &lt;code&gt;mutate()&lt;/code&gt; function. The goal is to recreate the current columns, while subtracting 1 from each ID. The &lt;code&gt;mutate()&lt;/code&gt; function works by creating a new column, but we can have it replace a column by giving the new column the same name as the old column. Here, I name the new data frames with a d3 suffix to distinguish them from the previous &lt;code&gt;nodes&lt;/code&gt; and &lt;code&gt;edges&lt;/code&gt; data frames.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;nodes_d3 &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;nodes&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; id &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; id &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
edges_d3 &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;edges&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; from &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; from &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; to &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; to &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is now possible to plot a &lt;code&gt;networkD3&lt;/code&gt; graph. Unlike &lt;code&gt;visNetwork()&lt;/code&gt;, the &lt;code&gt;forceNetwork()&lt;/code&gt; function uses a series of arguments to adjust the graph and plot network attributes. The &amp;ldquo;Links&amp;rdquo; and &amp;ldquo;Nodes&amp;rdquo; arguments provide the data for the plot in the form of edge and node lists. The function also requires &amp;ldquo;NodeID&amp;rdquo; and &amp;ldquo;Group&amp;rdquo; arguments. The data being used here does not have any groupings, and so I just have each node be its own group, which in practice means that the nodes will all be different colors. In addition, the below tells the function that the network has &amp;ldquo;Source&amp;rdquo; and &amp;ldquo;Target&amp;rdquo; fields, and thus is directed. I include in this graph a &amp;ldquo;Value&amp;rdquo;, which scales the width of the edges according to the &amp;ldquo;weight&amp;rdquo; column in the edge list. Finally, I add some aesthetic tweaks to make the nodes opaque and increase the font size of the labels to improve legibility. The result is very similar to the first &lt;code&gt;visNetwork()&lt;/code&gt; plot that I created but with different aesthetic stylings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;forceNetwork&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;Links &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; edges_d3&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Nodes &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; nodes_d3&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Source &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Target &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
             NodeID &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Group &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Value &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;weight&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
             opacity &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; fontSize &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; zoom &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;iframe src=&#34;../../img/network-analysis-with-r/d3-force-network.html&#34; width = &#34;100%&#34; height = &#34;500&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;One of the main benefits of &lt;code&gt;networkD3&lt;/code&gt; is that it implements a &lt;a href=&#34;https://bost.ocks.org/mike/sankey/&#34;&gt;d3-styled Sankey diagram&lt;/a&gt;. A Sankey diagram is a good fit for the letters sent to Daniel in 1585. There are not too many nodes in the data, making it easier to visualize the flow of letters. Creating a Sankey diagram uses the &lt;code&gt;sankeyNetwork()&lt;/code&gt; function, which takes many of the same arguments as &lt;code&gt;forceNetwork()&lt;/code&gt;. This graph does not require a group argument, and the only other change is the addition of a &amp;ldquo;unit.&amp;rdquo; This provides a label for the values that pop up in a tool tip when your cursor hovers over a diagram element.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;sankeyNetwork&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;Links &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; edges_d3&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Nodes &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; nodes_d3&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Source &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Target &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
              NodeID &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Value &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;weight&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; fontSize &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; unit &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letter(s)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;iframe src=&#34;../../img/network-analysis-with-r/d3-sankey-diagram.html&#34; width = &#34;100%&#34; height = &#34;500&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further reading on Network Analysis&lt;/h2&gt;

&lt;p&gt;This post has attempted to give a general introduction to creating and plotting network type objects in R using the &lt;code&gt;network&lt;/code&gt;, &lt;code&gt;igraph&lt;/code&gt;, &lt;code&gt;tidygraph&lt;/code&gt;, and &lt;code&gt;ggraph&lt;/code&gt; packages for static plots and &lt;code&gt;visNetwork&lt;/code&gt; and &lt;code&gt;networkD3&lt;/code&gt; for interactive plots. I have presented this information from the position of a non-specialist in network theory. I have only covered a very small percentage of the network analysis capabilities of R. In particular, I have not discussed the statistical analysis of networks. Happily, there is a plethora of resources on network analysis in general and in R in particular.&lt;/p&gt;

&lt;p&gt;The best introduction to networks that I have found for the uninitiated is &lt;a href=&#34;http://kateto.net/network-visualization&#34;&gt;Katya Ognyanova&amp;rsquo;s Network Visualization with R&lt;/a&gt;. This presents both a helpful introduction to the visual aspects of networks and a more in depth tutorial on creating network plots in R. Ognyanova primarily uses &lt;code&gt;igraph&lt;/code&gt;, but she also introduces interactive networks.&lt;/p&gt;

&lt;p&gt;There are two relatively recent books published on network analysis with R by Springer. &lt;a href=&#34;http://www.springer.com/us/book/9783319238821&#34;&gt;Douglas A. Luke, &lt;em&gt;A Userâs Guide to Network Analysis in R&lt;/em&gt; (2015)&lt;/a&gt; is a very useful introduction to network analysis with R. Luke covers both the statnet suit of packages and &lt;code&gt;igragh&lt;/code&gt;. The contents are at a very approachable level throughout. More advanced is &lt;a href=&#34;http://www.springer.com/us/book/9781493909827&#34;&gt;Eric D. Kolaczyk and GÃ¡bor CsÃ¡rdi&amp;rsquo;s, Statistical Analysis of Network Data with R (2014)&lt;/a&gt;. Kolaczyk and CsÃ¡rdi&amp;rsquo;s book mainly uses &lt;code&gt;igraph&lt;/code&gt;, as CsÃ¡rdi is the primary maintainer of the &lt;code&gt;igraph&lt;/code&gt; package for R. This book gets further into advanced topics on the statistical analysis of networks. Despite the use of very technical language, the first four chapters are generally approachable from a non-specialist point of view.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/briatte/awesome-network-analysis&#34;&gt;list curated by FranÃ§ois Briatte&lt;/a&gt; is a good overview of resources on network analysis in general. The &lt;a href=&#34;https://scottbot.net/tag/networks-demystified/&#34;&gt;Networks Demystified series of posts by Scott Weingart&lt;/a&gt; is also well worth perusal.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;One example of the interest in network analysis within digital humanities is the newly launched &lt;a href=&#34;https://jhnr.uni.lu/index.php/jhnr&#34;&gt;Journal of Historical Network Research&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;For a good description of the &lt;code&gt;network&lt;/code&gt; object class, including a discussion of its relationship to the &lt;code&gt;igraph&lt;/code&gt; object class, see &lt;a href=&#34;https://www.jstatsoft.org/article/view/v024i02&#34;&gt;Carter Butts, &amp;ldquo;network: A Package for Managing Relational Data in R&amp;rdquo;, &lt;em&gt;Journal of Statistical Software&lt;/em&gt;, 24 (2008): 1â36&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;This is the specific structure expected by &lt;code&gt;visNetwork&lt;/code&gt;, while also conforming to the general expectations of the other packages.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;This is the expected order for the columns for some of the networking packages that I will be using below.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;&lt;code&gt;ungroup()&lt;/code&gt; is not strictly necessary in this case. However, if you do not ungroup the data frame, it is not possible to drop the &amp;ldquo;source&amp;rdquo; and &amp;ldquo;destination&amp;rdquo; columns, as I do later in the script.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;Thomas M. J. Fruchterman and Edward M. Reingold, &amp;ldquo;Graph Drawing by Force-Directed Placement,&amp;rdquo; &lt;em&gt;Software: Practice and Experience&lt;/em&gt;, 21 (1991): 1129â1164.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;The &lt;code&gt;rm()&lt;/code&gt; function is useful if your working environment in R gets disorganized, but you do not want to clear the whole environment and start over again.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;The relationship between &lt;code&gt;tbl_graph&lt;/code&gt; and &lt;code&gt;igraph&lt;/code&gt; objects is similar to that between &lt;code&gt;tibble&lt;/code&gt; and &lt;code&gt;data.frame&lt;/code&gt; objects.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9&#34;&gt;It is possible to have &lt;code&gt;ggraph&lt;/code&gt; draw arrows, but I have not shown that here.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:10&#34;&gt;It can take a bit of time for the tool tip to appear.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Geocoding with R</title>
      <link>/2017/10/13/geocoding-with-r/</link>
      <pubDate>Fri, 13 Oct 2017 15:42:38 -0700</pubDate>
      
      <guid>/2017/10/13/geocoding-with-r/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://jessesadler.com/post/excel-vs-r/&#34;&gt;previous post&lt;/a&gt; I discussed some reasons to use &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt; instead of Excel to analyze and visualize data and provided a brief introduction to the R programming language. That post used an example of letters sent to the sixteenth-century merchant &lt;a href=&#34;https://jessesadler.com/project/dvdm-correspondence/&#34;&gt;Daniel van der Meulen&lt;/a&gt; in 1585. One aspect missing from the analysis was a geographical visualization of the data. This post will provide an introduction to geocoding and mapping location data using the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggmap/index.html&#34;&gt;ggmap&lt;/a&gt; package for R, which enables the creation of maps with &lt;a href=&#34;http://ggplot2.tidyverse.org&#34;&gt;ggplot&lt;/a&gt;. There are a number of websites that can help geocode location data and even create maps.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; You could also use a full-scale geographic information systems (GIS) application such as &lt;a href=&#34;https://qgis.org&#34;&gt;QGIS&lt;/a&gt; or &lt;a href=&#34;https://esri.com&#34;&gt;ArcGIS&lt;/a&gt;. However, an active developer community has made it possible to complete a full range of geographic analysis from geocoding data to the creation of publication-ready maps with R.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Geocoding and mapping data with R instead of a web or GIS application brings the general advantages of using a programming language in analyzing and visualizing data. With R, you can write the code once and use it over and over, while also providing a record of all your steps in the creation of a map.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This post will merely scratch the surface of the mapping capabilities of R and will not enter into the domain of the more complex specific geographic packages available for R.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; Instead, it will build on the &lt;a href=&#34;http://dplyr.tidyverse.org&#34;&gt;dplyr&lt;/a&gt; and &lt;a href=&#34;http://ggplot2.tidyverse.org&#34;&gt;ggplot&lt;/a&gt; skills discussed in &lt;a href=&#34;https://jessesadler.com/post/excel-vs-r/&#34;&gt;my brief introduction to R&lt;/a&gt;. The example of geocoding and mapping with R will also provide another opportunity to show the advantages of coding. In particular, geocoding is a good example of how code can simplify the workflow for entering data. Instead of dealing with separate spreadsheets to store information about the letters and geographic information, coding makes it possible to create the geographic information directly from the letters data. The code to find the longitude and latitude of locations can be saved as a R script and rerun if new data is added to ensure that the information is always kept up to date.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;preparing-data&#34;&gt;Preparing the data with &lt;code&gt;dplyr&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In this example, I will use the same database of letters sent to Daniel van der Meulen in 1585 as I did in the previous post. You can find the data and the R script that goes along with this tutorial on &lt;a href=&#34;https://github.com/jessesadler/intro-to-r&#34;&gt;GitHub&lt;/a&gt;. Before getting into the database of letters and figuring out how to geocode the locations found in the data, it is necessary to set up the environment in R by loading the libraries that we will be using. Here, I load both the &lt;code&gt;tidyverse&lt;/code&gt; library to import and manipulate the data and the &lt;code&gt;ggmap&lt;/code&gt; library to do the actual geocoding and mapping.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;tidyverse&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;ggmap&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As in the previous post, the data is loaded through the &lt;code&gt;read_csv()&lt;/code&gt; function from the &lt;code&gt;readr&lt;/code&gt; package. It is best to keep the names of objects consistent across scripts. Therefore, I name the object &lt;code&gt;letters&lt;/code&gt; with the assignment operator. Printing out the contents reveals the that &lt;code&gt;letters&lt;/code&gt; is a &lt;a href=&#34;http://tibble.tidyverse.org&#34;&gt;tibble&lt;/a&gt; with 114 letters and four columns.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; read_csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;data/correspondence-data-1585.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 114 x 4
##                     writer  source destination       date
##                      &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;     &amp;lt;date&amp;gt;
##  1 Meulen, Andries van der Antwerp       Delft 1585-01-03
##  2 Meulen, Andries van der Antwerp     Haarlem 1585-01-09
##  3 Meulen, Andries van der Antwerp     Haarlem 1585-01-11
##  4 Meulen, Andries van der Antwerp       Delft 1585-01-12
##  5 Meulen, Andries van der Antwerp     Haarlem 1585-01-12
##  6 Meulen, Andries van der Antwerp       Delft 1585-01-17
##  7 Meulen, Andries van der Antwerp       Delft 1585-01-22
##  8 Meulen, Andries van der Antwerp       Delft 1585-01-23
##  9    Della Faille, Marten Antwerp     Haarlem 1585-01-24
## 10 Meulen, Andries van der Antwerp       Delft 1585-01-28
## # ... with 104 more rows&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To do the actual geocoding of the locations I will be using the &lt;code&gt;mutate_geocode()&lt;/code&gt; function from the &lt;code&gt;ggmap&lt;/code&gt; package. To geocode a number of locations at one time, the function requires a data frame with a column containing the locations we would like to geocode. The goal, then, is to get a data frame with a column that contains all of the distinct locations found in the &lt;code&gt;letters&lt;/code&gt; data frame. In the &lt;a href=&#34;https://jessesadler.com/post/excel-vs-r/#new-dataframes&#34;&gt;introduction to R&lt;/a&gt; post I used the &lt;code&gt;distinct()&lt;/code&gt; function to get data frames with the unique sources and destinations. We can rerun that code here and look at the results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;sources &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
destinations &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; destination&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;sources&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 9 x 1
##      source
##       &amp;lt;chr&amp;gt;
## 1   Antwerp
## 2   Haarlem
## 3 Dordrecht
## 4    Venice
## 5     Lisse
## 6  Het Vlie
## 7   Hamburg
## 8     Emden
## 9 Amsterdam&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;destinations&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 5 x 1
##   destination
##         &amp;lt;chr&amp;gt;
## 1       Delft
## 2     Haarlem
## 3   The Hague
## 4  Middelburg
## 5      Bremen&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A glance at the two data frames shows that neither provide exactly what I are looking for. Neither the &lt;code&gt;sources&lt;/code&gt; nor the &lt;code&gt;destinations&lt;/code&gt; data frames include all of the locations that we want to geocode. It would be possible to geocode both the &lt;code&gt;sources&lt;/code&gt; and &lt;code&gt;destinations&lt;/code&gt; data frames, but this would place the geocoded information in two different data frames, which is less than ideal. Instead, we can join the two data frames together using the &lt;a href=&#34;http://r4ds.had.co.nz/relational-data.html&#34;&gt;join functions in dplyr&lt;/a&gt;. Coming from the world of spreadsheets, the join functions are a revelation, opening up seemingly endless possibilities for data manipulation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dplyr&lt;/code&gt; package includes a number of functions to join two data frames together to create a single data frame. The join functions use overlapping columns of data contained in both data frames, called keys, to match up the data. There are three join functions that are used most often. The &lt;code&gt;left_join()&lt;/code&gt; keeps all observations from the left, or first, data frame, while dropping all rows from the right, or second, data frame that do not have a match in the left data frame. The &lt;code&gt;inner_join()&lt;/code&gt; only keeps rows that contain matching keys in both data frames. Conversely, the &lt;code&gt;full_join()&lt;/code&gt; brings together all rows from both the left and right data frames. The differences between these functions may not be immediately apparent, but you can experiment with them to see the variety of outputs they create.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;sources&lt;/code&gt; as the left and &lt;code&gt;destinations&lt;/code&gt; as the right data frames, a &lt;code&gt;left_join()&lt;/code&gt; creates a new object with 9 rows, an &lt;code&gt;inner_join()&lt;/code&gt; results in only one row, and a &lt;code&gt;full_join()&lt;/code&gt; contains 13 observations. Thus, the &lt;code&gt;full_join()&lt;/code&gt; is what we are looking for. The &lt;code&gt;full_join()&lt;/code&gt; function â like the other join functions â takes three arguments: the two data frames to join and the key column by which they are to be joined. In this case, some extra work needs to be done to the identify the key columns. The key columns are the only columns in the two data frames, but because they have different names, it is necessary to declare that they are equivalent. This is done with the help of the concatenate or combine function, &lt;code&gt;c()&lt;/code&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; The below command creates a new data frame that I have called &lt;code&gt;cities&lt;/code&gt;, which brings together the &amp;ldquo;source&amp;rdquo; column with the &amp;ldquo;destination&amp;rdquo; column and therefore contains all of the locations found in the &lt;code&gt;letters&lt;/code&gt; data frame.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;cities &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; full_join&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sources&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; destinations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
cities&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 13 x 1
##        source
##         &amp;lt;chr&amp;gt;
##  1    Antwerp
##  2    Haarlem
##  3  Dordrecht
##  4     Venice
##  5      Lisse
##  6   Het Vlie
##  7    Hamburg
##  8      Emden
##  9  Amsterdam
## 10      Delft
## 11  The Hague
## 12 Middelburg
## 13     Bremen&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Printing out the &lt;code&gt;cities&lt;/code&gt; data frame shows that there are 13 distinct locations in the &lt;code&gt;letters&lt;/code&gt; data. However, the structure of the &lt;code&gt;cities&lt;/code&gt; object is less than ideal. The name of the column is &amp;ldquo;source,&amp;rdquo; which was taken over from the &lt;code&gt;sources&lt;/code&gt; data frame, but this is not an accurate description of the data in the column. This can be fixed with the help of &lt;code&gt;rename()&lt;/code&gt;, which uses the structure of &lt;code&gt;new_name = old_name&lt;/code&gt;. Here, I change the name of the âsourceâ column to &amp;ldquo;place&amp;rdquo; and then print out the first two rows with the &lt;code&gt;head()&lt;/code&gt; function to show the change in the column name. Notice that using the &lt;code&gt;cities&lt;/code&gt; object within the &lt;code&gt;rename()&lt;/code&gt; function and using the same name for the result overwrites the original object with the new one. Alternatively, you could name the new object a different name such as &lt;code&gt;cities1&lt;/code&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;cities &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; rename&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;cities&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; place &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;cities&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; n &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 2 x 1
##     place
##     &amp;lt;chr&amp;gt;
## 1 Antwerp
## 2 Haarlem&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;geocoding&#34;&gt;Geocoding with &lt;code&gt;ggmap&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We now have an object with the basic structure needed to geocode the locations. However, if you run &lt;code&gt;mutate_geocode()&lt;/code&gt; on the &lt;code&gt;cities&lt;/code&gt; object as it is, you will receive an error. The error is a good example of a common frustration with coding. Computers are picky, and because humans also write flawed code, bugs exist, making computers picky in odd ways. In this case, we are running into a problem in which the &lt;code&gt;mutate_geocode()&lt;/code&gt; function will not work on tibbles. As noted in my previous post, &lt;a href=&#34;http://r4ds.had.co.nz/tibbles.html&#34;&gt;tibbles&lt;/a&gt; are a special kind of data frame used by the &lt;code&gt;tidyverse&lt;/code&gt; set of packages. It is usually easier to work with tibbles in the &lt;a href=&#34;https://www.tidyverse.org&#34;&gt;tidyverse&lt;/a&gt; workflow, but here it is necessary to convert the tibble to a standard data frame object with &lt;code&gt;as.data.frame()&lt;/code&gt;. I give the result a new name to distinguish it from the &lt;code&gt;cities&lt;/code&gt; tibble.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;cities_df &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;as.data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;cities&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The locations data from the letters sent to Daniel is now ready to be geocoded. The &lt;code&gt;mutate_geocode()&lt;/code&gt; function uses &lt;a href=&#34;https://maps.google.com&#34;&gt;Google Maps&lt;/a&gt; to find the longitude and latitude of each location. The two necessary arguments are the data frame and the name of the column with the location data. The function can be used to find more information about each location, including the country and region, but here I just have the function return the longitude and latitude data. The function will query Google Maps, and so you must have an internet connection. This makes running the command relatively slow, especially if your data contains a large amount of locations. There is also a limit of 2,500 queries per day, so you may have to find other methods if you are geocoding thousands of locations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;locations_df &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; mutate_geocode&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;cities_df&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; place&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because &lt;code&gt;mutate_geocode()&lt;/code&gt; necessitates an internet connection, is somewhat slow to run, and has a daily limit, it is not something that you want to do all the time. It is a good idea to save the results by writing the object out to a csv file. Before doing this, however, we should inspect the data and make sure everything is correct. Let&amp;rsquo;s start by printing out the &lt;code&gt;locations_df&lt;/code&gt; object and see what we have.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;locations_df&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;##         place       lon      lat
## 1     Antwerp  4.402464 51.21945
## 2     Haarlem  4.646219 52.38739
## 3   Dordrecht  4.690093 51.81330
## 4      Venice 12.315515 45.44085
## 5       Lisse  4.557483 52.25793
## 6    Het Vlie  5.183333 53.30000
## 7     Hamburg  9.993682 53.55108
## 8       Emden  7.206010 53.35940
## 9   Amsterdam  4.895168 52.37022
## 10      Delft  4.357068 52.01158
## 11  The Hague  4.300700 52.07050
## 12 Middelburg  3.610998 51.49880
## 13     Bremen  8.801694 53.07930&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At a quick glance, the result looks like what we would expect. &lt;code&gt;locations_df&lt;/code&gt; is a data frame with three columns called &amp;ldquo;place,â &amp;ldquo;lon,â and &amp;ldquo;lat&amp;rdquo; with the latter two representing longitude and latitude of the location named in the first column. One thing that we might want to change, though this step is not necessary, is to convert the data frame back to a tibble, which can be done with the &lt;code&gt;as_tibble()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;locations &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; as_tibble&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;locations_df&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A quick look at the values of the longitude and latitude columns in the &lt;code&gt;locations&lt;/code&gt; data would seem to indicate that the geocoding process occurred correctly. All of the longitude and latitude values are within a reasonable range given the cities in the data. However, because the data given to the Google Maps query consisted of only the names of the cities, it is always worth double checking the returned values. As anyone who has ever used Google Maps before knows, it is possible that the query could return the location of a different place that has the same name.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;One way to check that the geocoding was done correctly is to map the locations with the &lt;a href=&#34;https://cran.r-project.org/web/packages/mapview/index.html&#34;&gt;mapview&lt;/a&gt; package. Using &lt;code&gt;mapview&lt;/code&gt; requires converting the &lt;code&gt;locations&lt;/code&gt; tibble to yet another format. This is done with the &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/&#34;&gt;simple features&lt;/a&gt; package, which brings us to the world of GIS with R. The first step is to load the &lt;code&gt;sf&lt;/code&gt; and &lt;code&gt;mapview&lt;/code&gt; packages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;mapview&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will not get into the details of the &lt;code&gt;sf&lt;/code&gt; package and type of objects that it creates here, but the function to transform the &lt;code&gt;locations&lt;/code&gt; tibble into an &lt;code&gt;sf&lt;/code&gt; object is understandable even without knowing the details. The function to make an &lt;code&gt;sf&lt;/code&gt; object takes three main arguments. The first two are the data frame to be converted and the columns that contain the geographic data. This second argument uses the &lt;code&gt;c()&lt;/code&gt; function to combine the &amp;ldquo;lon&amp;rdquo; and &amp;ldquo;lat&amp;rdquo; columns. The third argument determines the &lt;a href=&#34;https://en.wikipedia.org/wiki/Spatial_reference_system&#34;&gt;coordinate reference system (crs)&lt;/a&gt; for the data. Here, I indicate that I want the longitude and latitude to be plotted using the World Geographic System 1984 projection, which is referenced as &lt;a href=&#34;http://wiki.gis.com/wiki/index.php/European_Petroleum_Survey_Group&#34;&gt;European Petroleum Survey Group (EPSG)&lt;/a&gt; 4326. Geographic jargon aside, what matters at this stage is that EPSG 4326 is the projection used by web maps such as Google Maps.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;locations_sf &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; st_as_sf&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;locations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; coords &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; crs &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4326&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the data in the correct format, a simple call to the &lt;code&gt;mapview()&lt;/code&gt; function creates an interactive map with all the locations plotted as points. You can click on a point to see its name and compare it to the locations on the map. With this data, the accuracy of the location only needs to be at the city level. The location within the city is not relevant. Inspecting the data from the map shows that all of the locations were correctly geocoded.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;mapview&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;locations_sf&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;iframe src=&#34;../../img/geocoding-with-r/locations-mapview.html&#34; width=&#34;100%&#34; height=&#34;500&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;I can now save the locations data using the &lt;code&gt;readr&lt;/code&gt; package and a function similar to that used to load data. I will use the &lt;code&gt;write_csv()&lt;/code&gt; function to save the data as a csv file. Here, I save the &lt;code&gt;locations&lt;/code&gt; tibble, but you could also save the other forms of the locations data. The second argument tells the function where to save the csv and what to call the file. Here, I place the file in the same folder as the âcorrespondence-data-1585.csvâ and name the file âlocations.csvâ.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;write_csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;locations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;data/locations.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;mapping&#34;&gt;Mapping with &lt;code&gt;ggmap&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Now that we have successfully geocoded the locations from which Daniel&amp;rsquo;s correspondents sent letters and in which Daniel received them, we can move on to the task of plotting the locations on a map with &lt;code&gt;ggmap&lt;/code&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;ggmap&lt;/code&gt; is essentially an extension of &lt;code&gt;ggplot&lt;/code&gt;. It enables you to plot a map as the background of a &lt;code&gt;ggplot&lt;/code&gt; graph. The two main plotting features of &lt;code&gt;ggmap&lt;/code&gt; are the &lt;code&gt;get_map()&lt;/code&gt; function, which downloads a map from a specified map provider, and the &lt;code&gt;ggmap()&lt;/code&gt; function that plots the downloaded map on a &lt;code&gt;ggplot&lt;/code&gt; plot. Once a map is downloaded and plotted, it is then possible to use the normal grammar of &lt;code&gt;gglot&lt;/code&gt; to visually represent that data on the map.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;get_map()&lt;/code&gt; function can access data from three different map providers: &lt;a href=&#34;http://maps.google.com&#34;&gt;Google Maps&lt;/a&gt;, &lt;a href=&#34;http://www.openstreetmap.org&#34;&gt;Open Street Maps&lt;/a&gt;, and &lt;a href=&#34;http://maps.stamen.com/&#34;&gt;Stamen Maps&lt;/a&gt;. In this example, I will use Google Maps and the &lt;code&gt;get_googlemap()&lt;/code&gt; function. The challenge with the &lt;code&gt;get_map()&lt;/code&gt; function is downloading a map with a zoom level and location that shows all of the data with minimal extra space. We need two pieces of information to do this for &lt;code&gt;get_googlemap()&lt;/code&gt;: a location for the center of the map and a zoom level between 1 and 21.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10&#34;&gt;10&lt;/a&gt;&lt;/sup&gt; Figuring out the best center and zoom level for a map may take some trial and error. However, the work that we have already done can help to make an educated first guess. We can rerun &lt;code&gt;mapview(locations_sf)&lt;/code&gt; and look at the details provided by the map. The map produced by &lt;code&gt;mapview()&lt;/code&gt; shows the longitude and latitude at your cursor position and tells the zoom level of the map. We can use the cursor to guess a good center of the map or zoom in to find a city, which we can then geocode. After a couple of tries, I found that Mannheim, Germany works as a good center for a map with a zoom level of 6. I can get the coordinates of Mannheim with the generic &lt;code&gt;geocode()&lt;/code&gt; function and then place the coordinates into the &lt;code&gt;get_googlemap()&lt;/code&gt; function. The only alteration that needs to be made is to glue together the longitude and latitude values into one object with the concatenate function, &lt;code&gt;c()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;geocode&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mannheim&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;##        lon      lat
## 1 8.466039 49.48746&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;map &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; get_googlemap&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;center &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;49.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; zoom &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can look at what the map looks like by calling the &lt;code&gt;ggmap()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggmap&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;map&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/geocoding-with-r/google-map.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Given the historical nature of the data, some of the normal features of a Google Map are problematic. The modern road system obviously did not exist in the sixteenth century, nor are the modern political boundaries useful for the data. In the below command, I change the aesthetics of the original map using the color argument and turn off features of the map by using commands from the &lt;a href=&#34;https://developers.google.com/maps/documentation/staticmaps/&#34;&gt;Google Maps API&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;bw_map &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; get_googlemap&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;center &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;49.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; zoom &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bw&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  style &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;feature:road|visibility:off&amp;amp;style=element:labels|visibility:off&amp;amp;style=feature:administrative|visibility:off&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s see what the map looks like, but this time let&amp;rsquo;s add the location data. This is done using the normal &lt;code&gt;ggplot&lt;/code&gt; functions. Here, I want to add points for each place in the &lt;code&gt;locations&lt;/code&gt; data that we created above. The &lt;code&gt;aes()&lt;/code&gt; function within &lt;code&gt;geom_point()&lt;/code&gt; tells &lt;code&gt;ggplot&lt;/code&gt; that the x-axis corresponds to the longitude and the y-axis to the latitude of each place.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggmap&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;bw_map&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_point&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; locations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/geocoding-with-r/locations-map.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The resulting map is rather sparse and does not provide much information, but it gives a good starting point from which to build a more informative map.&lt;/p&gt;

&lt;h2 id=&#34;adding-data&#34;&gt;Adding data with &lt;code&gt;dplyr&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The above map used the &lt;code&gt;locations&lt;/code&gt; data to plot Daniel van der Meulen&amp;rsquo;s correspondence in 1585, but because it did not use the &lt;code&gt;letters&lt;/code&gt; data, the map could not tell us anything about the number of letters sent from or received in each location. Visualizing this information is a two-step process. Firstly, it is necessary to find out how many letters were sent from and received in each location. Because we need to distinguish between sent and received locations, this data will be contained in two data frames. To do this, we can reuse the &lt;code&gt;per_source&lt;/code&gt; and &lt;code&gt;per_destination&lt;/code&gt; code discussed in the &lt;a href=&#34;https://jessesadler.com/post/excel-vs-r/##the-pipe&#34;&gt;previous post&lt;/a&gt;, which summarizes the amount of letters sent from and to each location. Secondly, we have to join the longitude and latitude information from the &lt;code&gt;locations&lt;/code&gt; data frame to the &lt;code&gt;per_source&lt;/code&gt; and &lt;code&gt;per_destination&lt;/code&gt; data frames.&lt;/p&gt;

&lt;p&gt;As a reminder, to create the &lt;code&gt;per_source&lt;/code&gt; and &lt;code&gt;per_destination&lt;/code&gt; objects I will use the &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarise()&lt;/code&gt; workflow. This groups the data by one or more defined variables and creates a new column that counts the number of unique observations from the variable(s). Below, I make &lt;code&gt;per_source&lt;/code&gt; and &lt;code&gt;per_destination&lt;/code&gt; data frames and print out the &lt;code&gt;per_destination&lt;/code&gt; object to show its form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;per_source &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  arrange&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;desc&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

per_destination &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;destination&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  arrange&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;desc&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;per_destination&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 5 x 2
##   destination count
##         &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1       Delft    95
## 2     Haarlem     8
## 3      Bremen     6
## 4   The Hague     3
## 5  Middelburg     2&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;per_source&lt;/code&gt; and &lt;code&gt;per_destination&lt;/code&gt; data frames are in the basic structure that we want, but we need to add longitude and latitude columns to both of the objects so that they can be plotted on our map. Here, I will use a &lt;code&gt;left_join()&lt;/code&gt;. As noted above, a &lt;code&gt;left_join()&lt;/code&gt; only keeps the observations from the first data frame in the function. In other words, the result of a &lt;code&gt;left_join()&lt;/code&gt; will have the same number of rows as the original left data frame, while adding the longitude and latitude columns from the &lt;code&gt;locations&lt;/code&gt; data frame. The data frames will be joined by the columns containing the name of the cities. Because these &amp;ldquo;key&amp;rdquo; columns have different names, it is again necessary to denote their equivalency with &lt;code&gt;c()&lt;/code&gt;. Below, I print out the newly created &lt;code&gt;geo_per_destination&lt;/code&gt; data frame to show its structure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;geo_per_source &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; left_join&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;per_source&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; locations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;place&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

geo_per_destination &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; left_join&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;per_destination&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; locations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;place&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;geo_per_destination&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 5 x 4
##   destination count      lon      lat
##         &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1       Delft    95 4.357068 52.01158
## 2     Haarlem     8 4.646219 52.38739
## 3      Bremen     6 8.801694 53.07930
## 4   The Hague     3 4.300700 52.07050
## 5  Middelburg     2 3.610998 51.49880&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I now have the necessary data to create a map that will distinguish between the sources of the letters and their destinations and will allow me to show the quantities of letters sent from and received in each location.&lt;/p&gt;

&lt;h2 id=&#34;mapping-data&#34;&gt;Mapping the data&lt;/h2&gt;

&lt;p&gt;Creating a quality visualization with &lt;code&gt;ggplot&lt;/code&gt; involves iteration. Because the different parts of the plot are all written out in code, aspects can be added, subtracted, or modified until a good balance is found. Let&amp;rsquo;s start by creating a basic map using the &lt;code&gt;geo_per_source&lt;/code&gt; and &lt;code&gt;geo_per_destination&lt;/code&gt; data. The structure of the command is similar to that used to make the first map, but now that I am using information from two data frames, I need to use two &lt;code&gt;geom_point()&lt;/code&gt; functions. There is also a small change to the &lt;code&gt;ggmap()&lt;/code&gt; function to have the map take up the entire plotting area so that the longitude and latitude scales do not show. The only change to the &lt;code&gt;geom_point()&lt;/code&gt; function is the addition of different colors for the two sets of points. This makes it easier to distinguish between places from which Daniel&amp;rsquo;s correspondents sent letters and places where he received them. Notice that the argument for the color of the points is placed outside of the &lt;code&gt;aes()&lt;/code&gt; function. This makes all of the points plotted from each data frame a single color as opposed to mapping a change in color to a variable within the data. In this instance, I chose to specify color by name, but it is also possible to use rgb values, hex values, or a number of different color palettes.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggmap&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;bw_map&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_point&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; geo_per_destination&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_point&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; geo_per_source&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;purple&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/geocoding-with-r/data-map1.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This plot is much better than what we started with, but it still has a couple of issues. In the first place, it does not communicate any information about the quantity of letters. In addition, because the points are opaque, it is not clear that letters were both sent from and to Haarlem. The former issue can be rectified by using the size argument within the &lt;code&gt;aes()&lt;/code&gt; function. This will tell &lt;code&gt;ggplot&lt;/code&gt; to vary the size of each of the points in proportion to the count column. By default, the size aesthetic creates a legend to indicate the scale used. In the &lt;code&gt;ggmap()&lt;/code&gt; function I place the legend in the top right corner of the map since there are no data points there. The latter issue is solved by adding an alpha argument to the two &lt;code&gt;geom_point()&lt;/code&gt; functions. This argument is placed outside of the &lt;code&gt;aes()&lt;/code&gt; function, because it is an aspect we want to apply to all points. &lt;a href=&#34;https://www.w3schools.com/css/css3_colors.asp&#34;&gt;Alpha&lt;/a&gt; describes the translucency of an object and takes values between 1 (opaque) and 0 (translucent).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggmap&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;bw_map&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_point&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; geo_per_destination&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; count&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
             color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; alpha &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_point&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; geo_per_source&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; count&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
             color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;purple&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; alpha &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/geocoding-with-r/data-map2.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The above map is more informative, but it is hardly a finished product. For instance, there is no explanation for the differences in the color of the points, the smallest points are not easy to see, and there are no labels to indicate the names of the cities. Let&amp;rsquo;s deal with these issues one at a time to create a more fully fleshed out map. This will serve as an opportunity to demonstrate both the flexibility and complexity of &lt;code&gt;ggplot&lt;/code&gt; code.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12&#34;&gt;12&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The different colors for sent and received locations are not defined in a legend in the previous plot, because &lt;code&gt;ggplot&lt;/code&gt; only creates a legend for arguments within an &lt;code&gt;aes()&lt;/code&gt; function. Even though the color does not change within the data for each &lt;code&gt;geom_point()&lt;/code&gt; function, it is possible to place the color in the &lt;code&gt;aes()&lt;/code&gt; function when used in tandem with &lt;code&gt;scale_color_manual()&lt;/code&gt;. Inside the &lt;code&gt;aes()&lt;/code&gt; function the color is associated with a name that will appear in the legend. The actual color to be used is defined in a separate &lt;code&gt;scale_color_manual()&lt;/code&gt; function with the values argument.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:13&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:13&#34;&gt;13&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;A similar type of scale function also makes it possible to manually control the minimum and maximum size of the points drawn by the &lt;code&gt;size = count&lt;/code&gt; argument within the &lt;code&gt;aes()&lt;/code&gt; functions. For this last plot, I decided to make the minimum size of the point 2 and the maximum size 9. The range of the sizes for points is a good example of a plot element that you can play around with, trying out different sizes until you find one that works. Note too, that the best sizes of plot elements will also depend on the format in which the finished plot will be presented.&lt;/p&gt;

&lt;p&gt;In changing the background map from the default Google Map, I took out the city labels, but this makes it difficult to know which cities are represented by the different points. The plot only contains fourteen points, making it possible to label each point without too much clutter. In &lt;code&gt;ggplot&lt;/code&gt;, &lt;a href=&#34;http://r4ds.had.co.nz/graphics-for-communication.html#annotations&#34;&gt;labels are geoms&lt;/a&gt;; they are distinct elements placed on a plot with separate geom functions. Labeling points can be done with either &lt;code&gt;geom_text()&lt;/code&gt; or &lt;code&gt;geom_label()&lt;/code&gt;. &lt;code&gt;geom_text()&lt;/code&gt; places text at the indicated position, while &lt;code&gt;geom_label()&lt;/code&gt; places the text within a white text box. In addition to x and y coordinates, the two geoms require a &lt;code&gt;label&lt;/code&gt; argument, which indicates the variable that should be used for the text. By default &lt;code&gt;geom_text()&lt;/code&gt; and &lt;code&gt;geom_label()&lt;/code&gt; are placed exactly on the x and y coordinates given by the data. It is possible to nudge the placement of the labels with the &lt;code&gt;nudge_x&lt;/code&gt; and &lt;code&gt;nudge_y&lt;/code&gt; arguments. However, instead of using these, I will take advantage of the &lt;code&gt;geom_text_repel()&lt;/code&gt; function from the &lt;code&gt;ggrepel&lt;/code&gt; package. This package automatically chooses the placement of individual labels to ensure that they do not overlap. Note too that I use the &lt;code&gt;locations&lt;/code&gt; data frame for the data of the geom, since &lt;code&gt;locations&lt;/code&gt; contains the longitude and latitude of each point on the map.&lt;/p&gt;

&lt;p&gt;The final touches to the map can be made by ensuring that all of the elements are clearly noted. &lt;a href=&#34;http://r4ds.had.co.nz/graphics-for-communication.html#label&#34;&gt;Labels for the plot itself&lt;/a&gt; can be made with the &lt;code&gt;labs()&lt;/code&gt; function. For this plot, I will add a descriptive title and change the labels for the two legends. By default, &lt;code&gt;ggplot&lt;/code&gt; uses the name of the indicated column as the label for the legend. This is shown in the above map, where the size of the point is labeled as &amp;ldquo;count.&amp;rdquo; The default label can be replaced with a more informative one by indicating the aesthetic to be changed. Here, I will rename the size aesthetic as &amp;ldquo;Letters.&amp;rdquo; In addition, I chose not to have a label for the color aesthetic, which is indicated by &amp;ldquo;NULL&amp;rdquo;. Finally, I altered the size of the points drawn in the color legend to a larger size. &lt;a href=&#34;http://r4ds.had.co.nz/graphics-for-communication.html#legend-layout&#34;&gt;This is done with the &lt;code&gt;guides()&lt;/code&gt; function&lt;/a&gt;, which changes the scales of different aspects of the plot. In this case, I use the &lt;code&gt;override.aes&lt;/code&gt; argument to have the red and purple points in the legend be drawn at &lt;code&gt;size = 6&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;ggrepel&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggmap&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;bw_map&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_point&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; geo_per_destination&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; count&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Destination&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
             alpha &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_point&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; geo_per_source&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; count&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Source&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
             alpha &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  scale_color_manual&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;values &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;Destination &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; Source &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;purple&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  scale_size_continuous&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;range &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_text_repel&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; locations&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lon&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lat&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; place&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;title &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Correspondence of Daniel van der Meulen, 1585&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  guides&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; guide_legend&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;override.aes &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/geocoding-with-r/data-map3.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;concluding&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The above map demonstrates the geographic spread of Daniel van der Meulenâs correspondence in 1585 and shows the relative significance of the location of his correspondents and the different places in which he received letters throughout the year. More important than the details of the map for the purposes of this post is the process by which it was created. One interesting feature that I would like to emphasize in concluding is that the map uses data from three different data frames or tables: &lt;code&gt;geo_per_destination&lt;/code&gt;, &lt;code&gt;geo_per_source&lt;/code&gt;, and &lt;code&gt;locations&lt;/code&gt;. All three of these data frames derive from the original &lt;code&gt;letters&lt;/code&gt; data, while they in turn were the product of yet more data frames. By my count, running the commands contained in this post leads to the creation of 12 different data frame like objects. The below diagram outlines the workflow. The ability to split, subset, transform, and then join newly created tables in a variety of ways is a very powerful and flexible workflow. Because the data frames can be recreated by running the code, there is minimal overhead in managing them, especially in comparison to creating tables within spreadsheets. In this case, I would only recommend that the &lt;code&gt;locations&lt;/code&gt; data frame be saved for easy access in other R scripts and sessions. The other objects can be created on demand, or even more can be added, while the individual aspects of the map can be endlessly tweaked using the power of &lt;code&gt;ggplot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/geocoding-with-r/workflow-diagram.png&#34; height=&#34;450&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Geocoding can be done with websites such as &lt;a href=&#34;http://www.geonames.org&#34;&gt;geonames&lt;/a&gt; and the service provided by &lt;a href=&#34;http://geoservices.tamu.edu/Services/Geocode/&#34;&gt;Texas A&amp;amp;M&lt;/a&gt;. There are also a number of &lt;a href=&#34;http://crln.acrl.org/index.php/crlnews/article/view/16772/18314&#34;&gt;options for creating maps on the web&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;See the Introduction of &lt;a href=&#34;https://bookdown.org/robinlovelace/geocompr/&#34;&gt;Robin Lovelace, Jakub Nowosad, and Jannes Meunchow, &lt;em&gt;Geocomputation with R&lt;/em&gt;&lt;/a&gt; for a good overview of the GIS capabilities of R.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://www.cdrc.ac.uk/wp-content/uploads/2016/04/AS_EstablishingAFrameworkforOpenGIS.pdf&#34;&gt;Alex David Singleton, Seth Spielman, and Chris Brunsdon, âEstablishing a Framework for Open Geographic Information Science,â&lt;/a&gt; &lt;em&gt;International Journal of Geographical Information Science&lt;/em&gt;, 30 (2016): 1507-1521.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;A full list of geographic packages for R can be found at &lt;a href=&#34;https://cran.r-project.org/web/views/Spatial.html&#34;&gt;R Packages for the Analysis of Spatial Data&lt;/a&gt;. In future posts I will discuss some of these packages and their capabilities.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;In this command the quotations around &amp;ldquo;source&amp;rdquo; and &amp;ldquo;destination&amp;rdquo; are necessary. They tell the function that these are strings of characters.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;It is good practice to stay away from overwriting objects until you know whether the code works. However, if you mess up, it is always possible to recreate the original object by rerunning the code that created it.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;For instance, geocoding &amp;ldquo;Naples&amp;rdquo; will return the longitude and latitude of Naples, Florida and not Naples, Italy.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;If you want to get an idea of how an &lt;code&gt;sf&lt;/code&gt; object differs from a normal tibble or data frame, you can print out the &lt;code&gt;locations_sf&lt;/code&gt; object. This shows that the longitude and latitude columns have been combined into a special type of column called &lt;code&gt;simple_feature&lt;/code&gt; and named &amp;ldquo;geometry&amp;rdquo;, while additional information about the CRS is also provided.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9&#34;&gt;For a fuller discussion of &lt;code&gt;ggmap&lt;/code&gt;, see &lt;a href=&#34;https://journal.r-project.org/archive/2013-1/kahle-wickham.pdf&#34;&gt;David Kahle and Hadley Wickham, &amp;ldquo;ggmap: Spatial Visualization with ggplot2.â&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:10&#34;&gt;A zoom level of 1 is the most zoomed out, while 21 is the most zoomed in.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11&#34;&gt;&lt;a href=&#34;https://www.w3schools.com/colors/default.asp&#34;&gt;W3 Schools has a good discussion on the use of rgb and hex colors&lt;/a&gt;. For the use of colors with &lt;code&gt;ggplot&lt;/code&gt;, see Hadley Wickham, &lt;em&gt;ggplot2: Elegant Graphics for Data Analysis&lt;/em&gt;, Second edition (Springer, 2016), 133â145. A full list of the named colors available in R can be found &lt;a href=&#34;http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf&#34;&gt;here&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:12&#34;&gt;For a full discussion of the powers of &lt;code&gt;ggplot&lt;/code&gt;, see &lt;a href=&#34;http://www.springer.com/us/book/9783319242750&#34;&gt;Wickham, &lt;em&gt;ggplot2&lt;/em&gt;&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:13&#34;&gt;Wickham, &lt;em&gt;ggplot&lt;/em&gt;, 142â143.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:13&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Excel vs R: A Brief Introduction to R</title>
      <link>/2017/10/02/excel-vs-r-a-brief-introduction-to-r/</link>
      <pubDate>Mon, 02 Oct 2017 12:17:34 -0700</pubDate>
      
      <guid>/2017/10/02/excel-vs-r-a-brief-introduction-to-r/</guid>
      <description>&lt;p&gt;Quantitative research often begins with the humble process of counting. Historical documents are never as plentiful as a historian would wish, but counting words, material objects, court cases, etc. can lead to a better understanding of the sources and the subject under study. When beginning the process of counting, the first instinct is to open a spreadsheet. The end result might be the production of tables and charts created in the very same spreadsheet document. In this post, I want to show why this spreadsheet-centric workflow is problematic and recommend the use of a programming language such as &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt; as an alternative for both analyzing and visualizing data. There is no doubt that the learning curve for R is much steeper than producing one or two charts in a spreadsheet. However, there are real long-term advantages to learning a dedicated data analysis tool like R. Such advice to learn a programming language can seem both daunting and vague, especially &lt;a href=&#34;https://jessesadler.com/post/new-kinds-of-projects/&#34;&gt;if you do not really understand what it means to code&lt;/a&gt;. For this reason, after discussing why it is preferable to analyze data with R instead of a spreadsheet program, this post provides a brief introduction to R, as well as an example of analysis and visualization of historical data with R.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The draw of the spreadsheet is strong. As I first thought about ways to keep track of and analyze the thousands of letters in the &lt;a href=&#34;https://jessesadler.com/project/dvdm-correspondence/&#34;&gt;Daniel van der Meulen Archive&lt;/a&gt;, I automatically opened up &lt;a href=&#34;https://www.apple.com/numbers/&#34;&gt;Numbers&lt;/a&gt; â the spreadsheet software I use most often â and started to think about what columns I would need to create to document information about the letters. Whether one uses Excel, Numbers, Google Sheets or any other spreadsheet program, the basic structure and capabilities are well known. They all provide more-or-less aesthetically pleasing ways to easily enter data, view subsets of the data, and rearrange the rows based on the values of the various columns. But, of course, spreadsheet programs are more powerful than this, because you can add in your own programatic logic into cells to combine them in seemingly endless ways and produce graphs and charts from the results. The spreadsheet, after all, was &lt;a href=&#34;https://en.wikipedia.org/wiki/VisiCalc&#34;&gt;the first killer app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://giphy.com/gifs/11qAyKz9AbFEYM/html5&#34;&gt;With great power, there must also come great responsibility&lt;/a&gt;. Or, in the case of the spreadsheet, with great power there must also come great danger. The danger of the spreadsheet derives from its very structure. The mixture of data entry, analysis, and visualization makes it easy to confuse cells that contain raw data from those that are the product of analysis. The nature of defining programatic logic â such as which cells are to be added together â by mouse clicks means that a mistaken click or drag action can lead to errors or the overwriting of data. You only need to think about the dread of the moment when you go to close a spreadsheet and the program asks whether you would like to save changes. It makes you wonder. Do I want to save? What changes did I make? Because the logic in a spreadsheet is all done through mouse clicks, there is no way to effectively track what changes have been made either in one session or in the production of a chart. Excel mistakes can have wide-ranging consequences, as the controversy around the paper of &lt;a href=&#34;https://www.marketplace.org/2013/04/17/economy/excel-mistake-heard-round-world&#34; title=&#34;The Excel mistake heard round the world&#34;&gt;Carmen Reinhart and Kenneth Rogoff on national debt made clear&lt;/a&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;There are certainly legitimate reasons why people default to using spreadsheets for data analysis instead of using a programming language like R. Spreadsheets are much more inviting and comforting than any programming language could ever be to a newcomer. Learning how to program is intimidating and not something that can be done either quickly or easily. &lt;a href=&#34;https://en.wikipedia.org/wiki/Graphical_user_interface&#34;&gt;Graphical user interface (GUI)&lt;/a&gt; applications are simply less daunting than a &lt;a href=&#34;https://en.wikipedia.org/wiki/Command-line_interface&#34;&gt;command-line interface&lt;/a&gt;. Secondly, spreadsheets are a good tool for data entry, and it is tempting to simply move on to data analysis, keeping everything in the same document. Finally, the interactive nature of spreadsheets and the ability to create charts that change based on inputs is very attractive, even if fully unlocking this potential involves quite complex knowledge about how the program works. The first advantage of spreadsheets over programming is not easily overcome, but the latter two are built on what I believe to be a problematic workflow. Instead of using a couple of monolithic applications â often a office suite of applications â to do everything, I think that it is better to split up the workflow among several applications that &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Unix_philosophy&#34;&gt;do one thing well&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Creating a clear division between data entry and analysis is a major reason why analyzing data in a programming language is preferable to spreadsheet software. I still use spreadsheets, but their use is strictly limited to data entry.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; In a spreadsheet program the analysis directly manipulates the only copy of the raw data. In contrast, with R you import the data, creating an object that is a copy of the raw data.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; All manipulations to the data are done on this copy, and the original data are never altered in any way. This means that there is no way to mess up the raw data. Manipulating a copy of the data enables you to more freely experiment. All mistakes are basically inconsequential, even if they can be frustrating. A line of code that fails to produce the expected result can be tweaked and rerun â with the process repeated many times if necessary â until the expected result is returned.&lt;/p&gt;

&lt;p&gt;Working on a copy of the raw data can even simplify the process of data entry. Analyzing tabular data in R results in the creation of multiple objects, which are referred to as &lt;strong&gt;data frames&lt;/strong&gt; and can be thought of as equivalent to tables in a spreadsheet.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; The ability to split, subset, and transform the original data set into many different data frames has the benefit of drastically reducing the complexity of data entry. Instead of needing bespoke spreadsheets with multiple interrelated sheets and tables, every piece of data only needs to be entered once and all manipulations can be done in code. The different data frames that are created in the process of analysis do not even have to be saved, because they are so easily reproduced by the script of code.&lt;/p&gt;

&lt;p&gt;The separation of data entry and data analysis severely reduces the potential for mistakes, but maybe even more significantly, the use of code for data analysis enables the creation of &lt;a href=&#34;https://cran.r-project.org/web/views/ReproducibleResearch.html&#34;&gt;reproducible research&lt;/a&gt; that is simply not possible in spreadsheets. Reproducible research has been a &lt;a href=&#34;http://science.sciencemag.org/content/348/6242/1403.full&#34;&gt;hot button issue in the sciences&lt;/a&gt;, but there is no reason why research in the humanities should not strive to be reproducible where possible. With a programming language, the steps of the analysis can be clearly laid out in the code. The &lt;a href=&#34;http://r4ds.had.co.nz/workflow-projects.html#what-is-real&#34;&gt;âtruthâ of the analysis is the code&lt;/a&gt;, not the objects or visuals that the code creates. Saving analysis in code has the immediate benefit that it can be easily rerun anytime that new data is added. Code can also be applied to a completely new data set in a much more transparent manner than with spreadsheets. The long-term benefit is that with code all analysis is documented instead of being hidden behind mouse clicks. This makes it easier for you to go over your own analyses long after you have finished with it, as well as for others to understand what you did and check for errors.&lt;/p&gt;

&lt;h2 id=&#34;brief-intro&#34;&gt;A Brief Introduction to R&lt;/h2&gt;

&lt;p&gt;If you have never read or written any code before, it is difficult to know what the theoretical differences between spreadsheets and coding mean in practice.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; Therefore, I want to provide an example of analyzing and visualizing data in R. I will use the example of letters sent to Daniel van der Meulen in 1585, which is a subset of the data from my project on the &lt;a href=&#34;https://jessesadler.com/project/dvdm-correspondence/&#34;&gt;correspondence of Daniel van der Meulen&lt;/a&gt;. Before getting to the analysis, I will give a very brief introduction to R and define some key terms in order to make it more possible for anyone who has never used R or coded before to follow along. This is not meant to be a full-scale tutorial, so much as an introduction to what code in R looks like.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;R is an open-source programming language, which can be &lt;a href=&#34;https://cloud.r-project.org&#34;&gt;freely downloaded&lt;/a&gt;. Opening the downloaded program will lead you to a command-line interface devoid of any clues for what a novice should do next. Thankfully, there is a freely available application, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34;&gt;IDE&lt;/a&gt;, called &lt;a href=&#34;https://www.rstudio.com/products/rstudio&#34;&gt;RStudio&lt;/a&gt;, which provides a number of features to help write code. It is very much recommended to write your R code in RStudio. RStudio also has a plethora of &lt;a href=&#34;https://www.rstudio.com/online-learning/&#34;&gt;online tutorials&lt;/a&gt; on their website to help you get familiar with both R and the RStudio IDE.&lt;/p&gt;

&lt;p&gt;In either R or RStudio, the command line or &lt;strong&gt;console&lt;/strong&gt; is where all of the action takes place. It is here that you enter and run the code. The foundation of working in R is the process of creating and manipulating objects of various sorts. &lt;strong&gt;Objects&lt;/strong&gt; are assigned names with the assignment operator &lt;code&gt;&amp;lt;-&lt;/code&gt;. Thus, if I want to assign the name x the value of 5, I write &lt;code&gt;x &amp;lt;- 5&lt;/code&gt; into the console and press return.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;x &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing is printed when this operation is run, but now, if I type &lt;code&gt;x&lt;/code&gt; into the console and hit return, the value of x will be printed. Alternatively, I could have explicitly called for the object &lt;code&gt;x&lt;/code&gt; to be printed with the command &lt;code&gt;print(x)&lt;/code&gt;. The result is the same with either method.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] 5&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The power of R comes with the manipulation of objects through the use of functions. &lt;strong&gt;Functions&lt;/strong&gt; take in objects, possibly with a list of arguments to specify how the function works, and return another object. The objects and instructions for the functions are included within parentheses following the function name, and all instructions are separated by a comma.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; You can think of objects as nouns and functions as verbs. A simple example with the &lt;code&gt;sum()&lt;/code&gt; function demonstrates how functions work. &lt;code&gt;sum()&lt;/code&gt; does exactly what you would think. It takes a series of objects and returns their sum. You can see the function&amp;rsquo;s documentation by entering &lt;code&gt;?sum()&lt;/code&gt; on the console.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10&#34;&gt;10&lt;/a&gt;&lt;/sup&gt; The result of the &lt;code&gt;sum()&lt;/code&gt; function can either be immediately printed to the console, or it can be saved by assigning it a name. Below, I assign the result of &lt;code&gt;x + 10&lt;/code&gt; a name and then in a second command print out the value of the newly created object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;y &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] 15&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The flexibility of coding enables objects to be redefined endlessly. If a mistake is made or the data changes, the command can be rerun with the new values. For instance, if the value of &lt;code&gt;x&lt;/code&gt; changes from 5 to 15 in the data, I can simply change the code for creating the &lt;code&gt;x&lt;/code&gt; object and reassign the value of &lt;code&gt;x&lt;/code&gt;. Below, I do this and then rerun the same &lt;code&gt;sum()&lt;/code&gt; command, but this time I print the result directly to the console instead of assigning it to the object &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;x &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] 25&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you get a command that produces the expected result, you can save the command to an R script. A &lt;strong&gt;script&lt;/strong&gt; is a text file with a suffix of .R, which you can save. Thus, you could save the commands to create the objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to a file called &lt;code&gt;my_script.R&lt;/code&gt;. The script will then be available to you whenever you want to rerun the code in the console.&lt;/p&gt;

&lt;h2 id=&#34;tidyverse&#34;&gt;R Packages: The tidyverse&lt;/h2&gt;

&lt;p&gt;Upon download, R comes with a large number of functions, which together are referred to as base R. However, the capabilities of R can be greatly extended through the use of additional packages, which can be downloaded through &lt;a href=&#34;https://cran.r-project.org&#34;&gt;The Comprehensive R Archive Network (CRAN)&lt;/a&gt;. Packages both extend what is possible in R and provide alternative ways to do things possible in base R. This can be confusing, because it means there are often a plethora of ways to do a single operation, but the extension in capability is well worth it. Particularly significant are the packages bundled together in the &lt;code&gt;tidyverse&lt;/code&gt; package that were built by &lt;a href=&#34;http://hadley.nz&#34;&gt;Hadley Wickham&lt;/a&gt; and collaborators. The &lt;a href=&#34;https://www.tidyverse.org&#34;&gt;tidyverse&lt;/a&gt; provides a set of linked packages that all use a similar grammar to work with data. The tidyverse is &lt;a href=&#34;http://varianceexplained.org/r/teach-tidyverse/&#34;&gt;the best place to start if you are new to R&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The examples below show the ability to analyze and visualize data using the tidyverse packages. The analysis will mainly be done with the &lt;a href=&#34;http://dplyr.tidyverse.org&#34;&gt;dplyr package&lt;/a&gt; and the visualization is done with &lt;a href=&#34;http://ggplot2.tidyverse.org&#34;&gt;ggplot&lt;/a&gt;. The &lt;strong&gt;dplyr&lt;/strong&gt; functions all have a similar structure. The main &lt;code&gt;dplyr&lt;/code&gt; verbs or functions are &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;select()&lt;/code&gt;, &lt;code&gt;arrange()&lt;/code&gt;, &lt;code&gt;mutate()&lt;/code&gt;, &lt;code&gt;group_by()&lt;/code&gt;, and &lt;code&gt;summarise()&lt;/code&gt;. All take a data frame as their first argument. The next set of arguments are the column names on which the function performs its actions. The result of the functions is a new data frame object. The &lt;code&gt;dplyr&lt;/code&gt; functions can be linked together, so that it is possible to perform multiple manipulations on a data frame in one command. This is done with the use of the pipe, which in R is &lt;code&gt;%&amp;gt;%&lt;/code&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The commands needed to produce a &lt;strong&gt;ggplot&lt;/strong&gt; graph can be confusing at first, but the advantages of &lt;code&gt;ggplot&lt;/code&gt; are that it is based on a &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;grammar of graphics&lt;/a&gt;, which provides a systematic way to discuss graphs, and that &lt;code&gt;ggplot&lt;/code&gt; comes with good defaults, enabling the creation of nice looking graphs with minimal code. The two main components of &lt;code&gt;ggplot&lt;/code&gt; are geoms and the mapping of aesthetics. &lt;strong&gt;Geoms&lt;/strong&gt; tell &lt;code&gt;ggplot&lt;/code&gt; what kind of visual graphic to make, so there are separate geom functions for bar charts, points, lines, etc. &lt;strong&gt;Aesthetics&lt;/strong&gt; tell &lt;code&gt;ggplot&lt;/code&gt; which columns of the data to use for placement on the graph and for any other distinguishing aspects of these variables such as size, shape, and color. The graphs below are used to show some of the possibilities of &lt;code&gt;ggplot&lt;/code&gt; while staying mainly within the defaults. Publication ready visualizations are possible with &lt;code&gt;ggplot&lt;/code&gt;, but this would take more fiddling.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12&#34;&gt;12&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;An Example: Analyzing a correspondence network&lt;/h2&gt;

&lt;p&gt;With this basic overview of R out of the way, letâs move on to an example of an actual analysis of historical data to see what analysis and visualization in R looks like in practice. The data and an R script with all of the code can be found on &lt;a href=&#34;https://github.com/jessesadler/intro-to-r&#34;&gt;my GitHub page&lt;/a&gt;, if you would like to run the code yourself.&lt;/p&gt;

&lt;p&gt;Before doing anything with the data, it is necessary to set up our environment in R. This means loading the packages that we will be using with the &lt;code&gt;library()&lt;/code&gt; command. If you have not already downloaded the necessary packages, this can be done with the &lt;code&gt;install.packages()&lt;/code&gt; command with the name of the desired package in quotation marks. To begin we only need to load the &lt;code&gt;tidyverse&lt;/code&gt; package, which includes the individual packages that I will use for the analysis.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;tidyverse&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is done, it is possible to use the functions from the tidyverse packages, beginning with reading our data into R with the &lt;code&gt;read_csv()&lt;/code&gt; function. The code below takes a &lt;a href=&#34;https://en.wikipedia.org/wiki/Comma-separated_values&#34;&gt;csv file&lt;/a&gt; from a location on my computer and loads it into R as a data frame, while saving the object under the name &lt;code&gt;letters&lt;/code&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:13&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:13&#34;&gt;13&lt;/a&gt;&lt;/sup&gt; The code can be read as &amp;ldquo;create a data frame object called &lt;code&gt;letters&lt;/code&gt; from the csv file named &lt;code&gt;correspondence-data-1585.csv&lt;/code&gt;.&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; read_csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;data/correspondence-data-1585.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even before anything has been done to manipulate the data, we are already in a better position than if we kept the data in Excel. Having loaded the data, all further manipulations will be done on the object &lt;code&gt;letters&lt;/code&gt;, and no changes will be made to the &lt;code&gt;correspondence-data-1585.csv&lt;/code&gt; file. In other words, there is no way to tamper with the database that may have taken hours (or more) to meticulously produce.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by taking a look at the data itself by printing out a subset of the data to the console, which can be done by typing the name of the object into the console.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:14&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:14&#34;&gt;14&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 114 x 4
##                     writer  source destination       date
##                      &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;     &amp;lt;date&amp;gt;
##  1 Meulen, Andries van der Antwerp       Delft 1585-01-03
##  2 Meulen, Andries van der Antwerp     Haarlem 1585-01-09
##  3 Meulen, Andries van der Antwerp     Haarlem 1585-01-11
##  4 Meulen, Andries van der Antwerp       Delft 1585-01-12
##  5 Meulen, Andries van der Antwerp     Haarlem 1585-01-12
##  6 Meulen, Andries van der Antwerp       Delft 1585-01-17
##  7 Meulen, Andries van der Antwerp       Delft 1585-01-22
##  8 Meulen, Andries van der Antwerp       Delft 1585-01-23
##  9    Della Faille, Marten Antwerp     Haarlem 1585-01-24
## 10 Meulen, Andries van der Antwerp       Delft 1585-01-28
## # ... with 104 more rows&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells us that &lt;code&gt;letters&lt;/code&gt; is a &lt;a href=&#34;http://r4ds.had.co.nz/tibbles.html&#34;&gt;tibble&lt;/a&gt;, which is a special kind of data frame meant to work well in the tidyverse. Though not necessarily aesthetically pleasing, the basic shape of a table of data is clear.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:15&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:15&#34;&gt;15&lt;/a&gt;&lt;/sup&gt; The command printed out the first ten rows, while informing us that the complete data set contains 114 rows. Each letter has four pieces of information or variables: the writer of the letter, the place from which it was sent, the place to which it was sent, and the date sent. Below the column headings of writer, source, destination, and date we are informed of the type of data for each variable. This shows that the first three columns consist of character strings (chr), meaning that the data is words, while the last column contains dates, which is discussed in greater detail below.&lt;/p&gt;

&lt;h2 id=&#34;new-dataframes&#34;&gt;Creating new data frames&lt;/h2&gt;

&lt;p&gt;Now that we have an idea of the basic structure of the data, it is possible to begin to analyze it. A simple question that is fairly difficult to answer in Excel â at least I do not know how to do it other than by hand â is how many different people wrote letters to Daniel during this period. The below gives a list of the writers of letters. The code is a good demonstration of basic structure of &lt;code&gt;dplyr&lt;/code&gt; functions. The function &lt;code&gt;distinct()&lt;/code&gt; takes a data frame, followed by the name of the column that I am interested in, returning a new data frame object with one column, which consists of the unique values from the original column.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; writer&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 12 x 1
##                            writer
##                             &amp;lt;chr&amp;gt;
##  1        Meulen, Andries van der
##  2           Della Faille, Marten
##  3          Della Faille, Jacques
##  4             Staten van Brabant
##  5            Della Faille, Joris
##  6           Eeckeren, Robert van
##  7                 Anraet, Thomas
##  8       Burgemeesters of Antwerp
##  9                   Wale, Jan de
## 10               Calvart, Jacques
## 11 Janssen van der Meulen, Peeter
## 12                Noirot, Jacques&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because I did not assign the output a name, the results simply printed to the console. Saving the object requires the use of the assignment operator and choosing a memorable name. With this relatively simple operation I have created my first new data frame, which I can now refer to and further manipulate by calling to &lt;code&gt;writers&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;writers &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; writer&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Printing out the object shows that there are 12 people who sent Daniel letters in 1585, but another way to get this information is to run the &lt;code&gt;nrow()&lt;/code&gt; function, which returns the number of rows in a data frame. It is possible to run the function on either the &lt;code&gt;writers&lt;/code&gt; data frame, or to use the command that created the &lt;code&gt;writers&lt;/code&gt; data frame. Let&amp;rsquo;s do the latter to show how functions can be nested and print the result to the console. If you happen to forget the number of correspondents, the command can be typed again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kp&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; writer&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## [1] 12&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we run the commands and see that they produce results that are what we would expect from the data, it is possible to both save the commands in a script and also to reuse their structure for other pieces of information. For example, we can learn the locations from which Daniel&amp;rsquo;s correspondents sent letters and the locations in which he received letters by reusing the &lt;code&gt;distinct()&lt;/code&gt; function and changing the column name to be manipulated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 9 x 1
##      source
##       &amp;lt;chr&amp;gt;
## 1   Antwerp
## 2   Haarlem
## 3 Dordrecht
## 4    Venice
## 5     Lisse
## 6  Het Vlie
## 7   Hamburg
## 8     Emden
## 9 Amsterdam&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; destination&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 5 x 1
##   destination
##         &amp;lt;chr&amp;gt;
## 1       Delft
## 2     Haarlem
## 3   The Hague
## 4  Middelburg
## 5      Bremen&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can save the objects for later use by using the assignment operator and giving the data frames names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;sources &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
destinations &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; distinct&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; destination&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;the-pipe&#34;&gt;Linking &lt;code&gt;dplyr&lt;/code&gt; commands together with the pipe&lt;/h2&gt;

&lt;p&gt;Thus far, I have created data frames with one variable that show the unique values of the different variables, but this has not told us anything about the number of letters sent by each author or from each location. Doing this is more complicated, because it is necessary to chain together a series of functions using the pipe. This is the case for the question of how many letters each correspondent sent. Looking at the &lt;code&gt;dplyr&lt;/code&gt; verbs listed above you might assume that the &lt;code&gt;summarise()&lt;/code&gt; function will create a sum of the data. We can use the &lt;code&gt;summarise()&lt;/code&gt; function to create a new column called count that is filled with the number of observations through the &lt;code&gt;n()&lt;/code&gt; function. In other words, the code below tells R to summarize the &lt;code&gt;letters&lt;/code&gt; data frame and place the number of observations in a column called count.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;per_correspondent &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; count &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
per_correspondent&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 1 x 1
##   count
##   &amp;lt;int&amp;gt;
## 1   114&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the command and printing the result shows a result that was not what we hoped. Instead of showing letters per correspondent, the function created a column called count with a single value equal to the amount of rows in the &lt;code&gt;letters&lt;/code&gt; data frame. However, because the objects that are made in R are ephemeral, we can simply rerun the code after reworking it. This overwrites the old &lt;code&gt;per_correspondent&lt;/code&gt; object with one that is more useful. In the first attempt there is no notion that the goal is to group the number of letters by writer. This is the task &lt;code&gt;group_by()&lt;/code&gt; function. To create an object with correspondents in one column and the number of letters they sent in the second column we need to group the &lt;code&gt;letters&lt;/code&gt; data frame by writer and then summarize the letters within each group, creating the count column while doing so. The last line of the code arranges the table in descending order of letters sent by the newly created count variable. Notice that the &lt;code&gt;letters&lt;/code&gt; data frame is listed first before any function. This is because the &lt;code&gt;letters&lt;/code&gt; data frame is piped into each of the functions with the use of the &lt;code&gt;%&amp;gt;%&lt;/code&gt; command, which can be read as &amp;ldquo;and then.&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;per_correspondent &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;writer&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  arrange&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;desc&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
per_correspondent&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 12 x 2
##                            writer count
##                             &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
##  1        Meulen, Andries van der    63
##  2          Della Faille, Jacques    31
##  3           Della Faille, Marten     6
##  4             Staten van Brabant     4
##  5                Noirot, Jacques     2
##  6                   Wale, Jan de     2
##  7                 Anraet, Thomas     1
##  8       Burgemeesters of Antwerp     1
##  9               Calvart, Jacques     1
## 10            Della Faille, Joris     1
## 11           Eeckeren, Robert van     1
## 12 Janssen van der Meulen, Peeter     1&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the result, we can see that the above changes produced the kind output we expected. The &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarise()&lt;/code&gt; functions worked to create a data frame in which each author is listed once. The &lt;code&gt;count = n()&lt;/code&gt; within the &lt;code&gt;summarise()&lt;/code&gt; function created a new variable called count that is filled with the number of letters each correspondent sent. A cursory look at the results shows that the vast majority of the letters sent to Daniel were written by his brother Andries and his brother-in-law Jacques della Faille. Andries lived in the besieged city of Antwerp for most of 1585, and Jacques lived in Haarlem, so it will hardly be surprising that if we look at the amount of letters sent from each location that Antwerp and Haarlem dominate. Having written the above code, it is possible to rework it to create a data frame called &lt;code&gt;per_source&lt;/code&gt;, which is done by replacing the writer column in the &lt;code&gt;group_by()&lt;/code&gt; function with the source variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;per_source &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  arrange&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;desc&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
per_source&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 9 x 2
##      source count
##       &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1   Antwerp    76
## 2   Haarlem    30
## 3    Venice     2
## 4 Amsterdam     1
## 5 Dordrecht     1
## 6     Emden     1
## 7   Hamburg     1
## 8  Het Vlie     1
## 9     Lisse     1&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ggplot&#34;&gt;Visualizing the data with &lt;code&gt;ggplot&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;While it is nice to have the two above sets of information presented in tables, it is also possible to visualize the newly created data with &lt;code&gt;ggplot&lt;/code&gt;. The structure of &lt;code&gt;ggplot&lt;/code&gt; functions is a bit different than that of &lt;code&gt;dplyr&lt;/code&gt;. Like &lt;code&gt;dplyr&lt;/code&gt; the functions are linked together, but the linking is done with the &lt;code&gt;+&lt;/code&gt; symbol instead of &lt;code&gt;%&amp;gt;%&lt;/code&gt;. With &lt;code&gt;ggplot&lt;/code&gt; the three main functions are &lt;code&gt;ggplot()&lt;/code&gt;, one or more &lt;code&gt;geom_*&lt;/code&gt; function, which informs the type of graphical element to draw, and one or more &lt;code&gt;aes()&lt;/code&gt; function that sets the aesthetic values of the graph. The designation of the data to use and the &lt;code&gt;aes()&lt;/code&gt; functions can be placed within either the &lt;code&gt;ggplot()&lt;/code&gt; function, indicating that they apply to all of the geoms, or they can be placed within individual &lt;code&gt;geom_*&lt;/code&gt; functions in which case they will only be used for that geom. All this is to say that there are a variety of ways to produce the same visuals. The below code adds an extra function to label the axes with &lt;code&gt;labs()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggplot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; per_source&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_bar&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; count&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; stat &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters written&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/excel-vs-r/per_source.png&#34; height=&#34;500&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One part of the above code that might be a bit difficult to figure out is &lt;code&gt;stat = &amp;quot;identity&amp;quot;&lt;/code&gt;. This needs to be called, because the code to create the &lt;code&gt;per_source&lt;/code&gt; data frame actually did more work than necessary. &lt;code&gt;stat = &amp;quot;identity&amp;quot;&lt;/code&gt; tells &lt;code&gt;geom_bar()&lt;/code&gt; to set the height of the bars to the exact number in the count column. However, with &lt;code&gt;geom_bar()&lt;/code&gt; only the x-axis needs to be specified. The y value is then calculated automatically based on the x value. Therefore, the below code, which uses the original &lt;code&gt;letters&lt;/code&gt; data frame, could produce the exact same graph. Because of this, it is little trouble to change the variable for the x-axis to writers and get a completely new graph. Notice the change in the data and the deletion of the y variable and &lt;code&gt;stat&lt;/code&gt;. One problem with the correspondents data is the length of the names. Therefore, this command makes changes to the &lt;code&gt;theme()&lt;/code&gt; function. The arguments in the function are used to place the correspondent names at a ninety degree angle so that they do not overlap.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggplot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_bar&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; writer&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters written&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  theme&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;axis.text.x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; element_text&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;angle &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; hjust &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; vjust &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/excel-vs-r/per_correspondent.png&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;dates&#34;&gt;Working with dates&lt;/h2&gt;

&lt;p&gt;Now, let&amp;rsquo;s investigate the dates column. Dealing with dates is often tricky. To facilitate this analysis we need to load the &lt;code&gt;lubridate&lt;/code&gt; package. &lt;a href=&#34;http://lubridate.tidyverse.org/&#34;&gt;lubridate&lt;/a&gt; is another package created by Hadley Wickham, which fits into the tidyverse manner of dealing with data. It is not among the packages loaded with &lt;code&gt;library(tidyverse)&lt;/code&gt;, and so it is necessary to load it separately.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;lubridate&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the letters in this data set were all received in one year, it would be interesting to see how many letters Daniel received each month. This question is particularly interesting, because in 1585 Daniel&amp;rsquo;s home city of Antwerp was under siege by Spanish troops, and Daniel was serving as a representative for his city to the rebels in Holland. It is also an interesting issue of analysis, because while the &lt;code&gt;letters&lt;/code&gt; data frame contains information about the month the letters were sent, there is no month column. This prevents us from using the &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarise()&lt;/code&gt; workflow that we have developed. The answer comes from the &lt;code&gt;lubridate&lt;/code&gt; package, which includes a function called &lt;code&gt;month()&lt;/code&gt;. This function extracts the month from a date object, which we know the date column is, because it is identified as such when we have printed the &lt;code&gt;letters&lt;/code&gt; data frame. The goal is to create a new column called month. This is done through the &lt;code&gt;dplyr&lt;/code&gt; function &lt;code&gt;mutate()&lt;/code&gt;, which creates the column and then applies the &lt;code&gt;month()&lt;/code&gt; function to each of the dates. The remaining code is similar to that used above, but now the column we want to &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarise()&lt;/code&gt; is the newly created month column.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;per_month &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;month &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; month&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;month&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
per_month&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 12 x 2
##    month count
##    &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
##  1     1    11
##  2     2    14
##  3     3    18
##  4     4     9
##  5     5    14
##  6     6     9
##  7     7     9
##  8     8    14
##  9     9    10
## 10    10     2
## 11    11     1
## 12    12     3&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the result of this code, a problem is immediately apparent. The number of letters per month is as expected, but the months are returned as numbers, which is less than ideal. However, by looking at the documentation for lubridate by typing &lt;code&gt;?month()&lt;/code&gt; into the console, it is possible to see that what needs to be done is to change the label argument to TRUE from the default of FALSE.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;per_month &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;month &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; month&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;month&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
per_month&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 12 x 2
##    month count
##    &amp;lt;ord&amp;gt; &amp;lt;int&amp;gt;
##  1   Jan    11
##  2   Feb    14
##  3   Mar    18
##  4   Apr     9
##  5   May    14
##  6   Jun     9
##  7   Jul     9
##  8   Aug    14
##  9   Sep    10
## 10   Oct     2
## 11   Nov     1
## 12   Dec     3&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the data in a better form, we can plot it by making another bar chart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggplot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; per_month&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_bar&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; month&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; count&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; stat &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters sent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/excel-vs-r/per_month.png&#34; height=&#34;500&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The graph shows a peak in March of 1585 when Antwerp was in an extremely vulnerable position and it was more important than ever that it receive military and monetary assistance from the rebels in Holland. Another peak is reached in August when Antwerp surrendered, forcing Daniel and his family members to go into exile. The letters declined beginning in October, when Daniel left Holland to live in exile with his family in Bremen.&lt;/p&gt;

&lt;p&gt;As a fun aside, it is also possible to see what day of the week the letters were sent. Luckily, the data comes from 1585, three years after the creation of &lt;a href=&#34;http://en.wikipedia.org/wiki/Gregorian_calendar&#34;&gt;Gregorian Calendar&lt;/a&gt;, and the areas from which the letters were sent had already transitioned to the new calendar. This means that they were using the same calendar as we do now, as opposed to a place like England, which only adopted the Gregorian Calendar in 1752. Therefore, we do not have to worry about adding 10 days to move from the old calendar to the new calendar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;per_wday &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;wday &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; wday&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;wday&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
per_wday&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 7 x 2
##    wday count
##   &amp;lt;ord&amp;gt; &amp;lt;int&amp;gt;
## 1   Sun     7
## 2   Mon    16
## 3  Tues    20
## 4   Wed    16
## 5 Thurs    22
## 6   Fri    16
## 7   Sat    17&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can even create the chart using the original &lt;code&gt;letters&lt;/code&gt; data frame and call the &lt;code&gt;wday()&lt;/code&gt; function within the definition of the x variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggplot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_bar&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; wday&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters sent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/excel-vs-r/per_wday.png&#34; height=&#34;500&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, let&amp;rsquo;s see who sent Daniel letters on Sundays. We can use the &lt;code&gt;filter()&lt;/code&gt; function, which returns rows that match a certain argument. The below code uses the knowledge that without labels, Sunday is equivalent to 1. The code is also written in a slightly different style. Even though only a single function is called, &lt;code&gt;%&amp;gt;%&lt;/code&gt; is used to pipe the data frame into the function, which cleans up the function call slightly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;&lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; filter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;wday&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 7 x 4
##                    writer  source destination       date
##                     &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;     &amp;lt;date&amp;gt;
## 1   Della Faille, Jacques Haarlem       Delft 1585-02-10
## 2 Meulen, Andries van der Antwerp       Delft 1585-03-31
## 3 Meulen, Andries van der Antwerp       Delft 1585-04-28
## 4   Della Faille, Jacques Haarlem       Delft 1585-05-12
## 5            Wale, Jan de  Venice     Haarlem 1585-06-23
## 6   Della Faille, Jacques Haarlem       Delft 1585-08-18
## 7   Della Faille, Jacques Haarlem       Delft 1585-09-08&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;correspondents-dates&#34;&gt;Combining data for correspondents and dates&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarise()&lt;/code&gt; workflow developed so far results in data frames with two columns and thus only tells us about one variable from the data at a time. We can get a better understanding of Daniel&amp;rsquo;s network by looking into how many letters each writer sent per month, which would involve the creation of a data frame with three columns. One advantage of using code is that it is often relatively simple to take a functioning line of code and tweak it to create a different result. Here, I take the line of code that produced &lt;code&gt;per_month&lt;/code&gt; and alter it by adding the writer variable to the &lt;code&gt;group_by&lt;/code&gt; function. Now the code will group the letters written by each correspondent per month and then count them. Notice how the dimensions of the resulting data frame has changed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;correspondent_month &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;month &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; month&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; label &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;writer&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; month&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  arrange&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;desc&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
correspondent_month&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;## # A tibble: 34 x 3
## # Groups:   writer [12]
##                     writer month count
##                      &amp;lt;chr&amp;gt; &amp;lt;ord&amp;gt; &amp;lt;int&amp;gt;
##  1 Meulen, Andries van der   Mar    12
##  2 Meulen, Andries van der   Jan    10
##  3 Meulen, Andries van der   Feb     9
##  4 Meulen, Andries van der   Jul     8
##  5   Della Faille, Jacques   Aug     7
##  6   Della Faille, Jacques   Sep     7
##  7 Meulen, Andries van der   Apr     7
##  8 Meulen, Andries van der   May     7
##  9   Della Faille, Jacques   May     5
## 10 Meulen, Andries van der   Jun     5
## # ... with 24 more rows&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this new object called &lt;code&gt;correspondent_month&lt;/code&gt; it is possible to add to the bar chart on letters per month, by filling in the bars with letters per correspondent in each month. The only difference in the code below from the earlier chart is the inclusion of &lt;code&gt;fill = writer&lt;/code&gt; in &lt;code&gt;geom_bar()&lt;/code&gt; and then giving it a label in &lt;code&gt;labs()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggplot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; correspondent_month&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  geom_bar&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; month&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; count&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; fill &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; writer&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; stat &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters sent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; fill &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Correspondents&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/excel-vs-r/correspondent_month.png&#34; height=&#34;500&#34;/&gt;&lt;/p&gt;

&lt;p&gt;A bar graph is only one of many different geoms made available through &lt;code&gt;ggplot&lt;/code&gt;, so let me finish by using the same information to produce a line graph with points showing the amount of letters each correspondent sent in a month. The structure of the command is slightly different here, because I place the &lt;code&gt;aes()&lt;/code&gt; function in the &lt;code&gt;ggplot()&lt;/code&gt; function. This is done because the same aesthetics will be used by both &lt;code&gt;geom_point()&lt;/code&gt; and &lt;code&gt;geom_line()&lt;/code&gt;. In the &lt;code&gt;geom_point()&lt;/code&gt; function I increase the size of all of the points so that they are more clearly visible. The &lt;code&gt;geom_line()&lt;/code&gt; function adds a new aesthetic for group, which tells the function how to connect the lines.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.r&#34; data-lang=&#34;.r&#34;&gt;ggplot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; correspondent_month&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; month&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; count&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; writer&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_point&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;size &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  geom_line&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;aes&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;group &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; writer&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
  labs&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Letters sent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; color &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Correspondents&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/excel-vs-r/line_graph.png&#34; height=&#34;500&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These two graphs provide different ways to visualize the data. Both give a clearer picture of the development of Daniel&amp;rsquo;s correspondence over the course of 1585. Up until September, Andries was Daniel&amp;rsquo;s most signifiant correspondent. After the fall of Antwerp, the two lived together in Bremen, forestalling any need to communicate by correspondence. On the other hand, in the second half of the year, Daniel&amp;rsquo;s correspondence picked up with his brother-in-law, Jacques.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The examples above only display a small fraction of the analysis and visualization capabilities of R. More fully developed visualizations with a larger set of the data used here can be seen on the &lt;a href=&#34;https://www.jessesadler.com/project/&#34;&gt;the Projects page of this website&lt;/a&gt;, including an &lt;a href=&#34;https://jessesadler.shinyapps.io/dvdm-correspondence/&#34;&gt;interactive map of the letters that can be filtered by date&lt;/a&gt;. Going from no coding experience to the production of visualizations in R is by no means easy, though there is an ever-growing set of resources designed to make the process as easy as possible. This post is part of my attempt to add to these resources from the perspective of a historian. In future posts I will build on the foundation provided here. In particular, the above analysis did not take advantage of the geographic nature of the data. I cover the process of geocoding and mapping the data in &lt;a href=&#34;https://www.jessesadler.com/post/geocoding-with-r/&#34;&gt;Geocoding with R&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;This post concentrates on the basic aspects of data analysis and visualization using the popular &lt;a href=&#34;http://dplyr.tidyverse.org&#34;&gt;dplyr&lt;/a&gt; and &lt;a href=&#34;http://ggplot2.tidyverse.org&#34;&gt;ggplot&lt;/a&gt; packages for R. In future posts, I will discuss more aspects of R.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://simplystatistics.org/2016/02/12/not-so-standard-deviations-episode-9-spreadsheet-drama/&#34;&gt;Episode 9 of the Not So Standard Deviations podcast&lt;/a&gt; has a good discussion of Excel vs R, which helped me think through my own thoughts on this subject.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;My workflow is to enter data into Numbers, export it into a csv file, and then analyze with R. I have found data entry directly into csv too clunky, and so spreadsheets still have a place in my life.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;There are a variety of different data types in R, but in this post I will concentrate on tabular data, or data frames, because that is the form of data derived from spreadsheet and most used within the humanities and social sciences.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;See the explanation and examples below on how objects in R are created and manipulated.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;This was the position that I was in only a couple of months ago.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;If you are interested in learning how to use R, two good places to start are &lt;a href=&#34;http://r4ds.had.co.nz&#34;&gt;Garrett Grolemund and Hadley Wickham, &lt;em&gt;R for Data Science&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://bookdown.org/rdpeng/rprogdatascience/&#34;&gt;Roger Peng, &lt;em&gt;R Programming for Data Science&lt;/em&gt;&lt;/a&gt;. Both are available for free and cover the topics that I discuss here in much greater detail.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;Do not worry about the &lt;code&gt;[1]&lt;/code&gt; in the printed output. This merely informs us that this is the first number in the object &lt;code&gt;x&lt;/code&gt;. Behind the scenes in R &lt;code&gt;x&lt;/code&gt; is not simply a number but a vector of numbers of length one.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9&#34;&gt;A common frustration when learning to code is how persnickety computers are about typos and grammar. If a command does not work, it is likely because there is a typo somewhere.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:10&#34;&gt;If you want to know how a function works or what arguments are necessary to run the function, you can always access a function&amp;rsquo;s documentation with &lt;code&gt;?function_name()&lt;/code&gt;. The documentation for many functions tend to be jargon heavy, but most also contain examples of how to use the function.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11&#34;&gt;The best resource for learning about these &lt;code&gt;dplyr&lt;/code&gt; functions is Chapter 5 of &lt;a href=&#34;http://r4ds.had.co.nz/transform.html&#34;&gt;Grolemund and Wickham, &lt;em&gt;R for Data Science&lt;/em&gt;&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:12&#34;&gt;There are many resources on learning &lt;code&gt;ggplot&lt;/code&gt;. Chapter 3 of &lt;a href=&#34;http://r4ds.had.co.nz/data-visualisation.html&#34;&gt;Grolemund and Wickham, &lt;em&gt;R for Data Science&lt;/em&gt;&lt;/a&gt; is a good place to start. Another invaluable resource for ggplot that is still under development is &lt;a href=&#34;http://socviz.co/&#34;&gt;Kieran Healyâs &lt;em&gt;Data Visualization for Social Science&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:13&#34;&gt;Remember that a data frame is essentially a table. To be more precise, in this case, the &lt;code&gt;read_csv()&lt;/code&gt; function produces a &lt;a href=&#34;http://r4ds.had.co.nz/tibbles.html&#34;&gt;tibble&lt;/a&gt;, which is a special kind of data frame.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:13&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:14&#34;&gt;One advantage of tibbles over default data frames is that tibbles are smart about printing out a subset of the data to the console instead of all of the content. The latter approach becomes messy when data frames have hundreds or thousands of rows.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:14&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:15&#34;&gt;RStudio comes with its own viewer, enabling you to view the contents of data frames in a manner that replicates the experience of a spreadsheet.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:15&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>My Approach to Digital Humanities</title>
      <link>/2017/08/18/my-approach-to-digital-humanities/</link>
      <pubDate>Fri, 18 Aug 2017 18:16:43 -0700</pubDate>
      
      <guid>/2017/08/18/my-approach-to-digital-humanities/</guid>
      <description>&lt;p&gt;Digital humanities holds the promise of increasing the means by which scholars are able to analyze and present data. Though some sentiments about the significance of digital humanities might be overblown, there is no doubt that &lt;a href=&#34;http://dh-r.lincolnmullen.com/introduction.html&#34;&gt;the more ways we have to analyze sources the better&lt;/a&gt;. Learning a variety of the tools that make up the rather nebulous universe of digital humanities is like learning a new language. It opens up new possibilities that were previously closed or necessitated the expertise of others. This frames digital humanities as a collection of skills rather than a means to a predetermined end. I have adopted this perspective in learning about the possibilities opened by digital humanities and working on a &lt;a href=&#34;https://jessesadler.com/project/dvdm-correspondence/&#34;&gt;digital humanities project&lt;/a&gt;. I am hardly the first person to take these steps, but I hope that by explaining my thought process I can set a basis for future posts on digital humanities.&lt;/p&gt;

&lt;p&gt;If there has been one guiding force in my approach to digital humanities, it is to learn skills and tools in the process of production. In a way, this is simply the application of critical thinking to how I create my scholarly work. Instead of doing things in what seems the de facto manner, I have sought to question if there is either a more efficient way or a way in which I could gain or improve my competency. The goal of efficiency was particularly significant in thinking about how to organize my research and writing &lt;a href=&#34;https://jessesadler.com/post/thinking-about-workflow/&#34;&gt;(DH 1.0)&lt;/a&gt;, while learning new skills has been more important in the production of digital humanities projects &lt;a href=&#34;https://jessesadler.com/post/new-kinds-of-projects/&#34;&gt;(DH 2.0)&lt;/a&gt;. This may not be the easiest way to complete a project in the short run, but by doing things the hard way, I am looking to open up new opportunities for future projects. With this theoretical approach in mind, let me now discuss a few concrete principles of my digital humanities practices concerning text, applications, and producing digital humanities projects.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;At the basis of all my research is the use of &lt;a href=&#34;https://en.wikipedia.org/wiki/Plain_text&#34;&gt;plain text&lt;/a&gt;, which I usually write in &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;. All of my research notes are in plain text, and I wrote drafts for over half of my dissertation in plain text. Writing in plain text has a number of advantages â which I will discuss in a future post â but an unexpected benefit is that writing Markdown changed my approach to text in a way that gave me a solid basis to tackle HTML, CSS, and even coding.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; In addition, Markdown is ubiquitous on the web. This blog post is written in Markdown, and I have made &lt;a href=&#34;https://jessesadler.shinyapps.io/dvdm-correspondence/&#34;&gt;interactive visualizations&lt;/a&gt; with &lt;a href=&#34;http://rmarkdown.rstudio.com&#34;&gt;R Markdown&lt;/a&gt;, an extension of Markdown for R.&lt;/p&gt;

&lt;p&gt;Of course, plain text by itself only gets you so far. The power of text has to be harnessed by applications. A major turning point for me in the efficiency and power of my research workflow was the realization that investment in apps, in terms of both money and time, could provide long-term benefits. Using free apps is definitely nice, but if you consider how many hours you spend in an app that plays a significant role in your workflow, the investment is usually worth it. I have come to have real enjoyment in using certain apps. I also think that is is worth while to take some time to learn how to use each app efficiently and even to learn some history about them. There is nothing worse than adapting to a new app only to learn that it is no longer under development. Though there are exceptions, many of my most essential apps have long histories and a solid base of users that points towards continued development.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;In terms of the tools and choices I have made in the production of digital humanities projects, I have almost always chosen in favor of more control and customization over plug-and-play options. This goal is often in parallel with choosing to use open standards â with plain text being the ultimate open standard â and &lt;a href=&#34;https://en.wikipedia.org/wiki/Open-source_software&#34;&gt;open-source software&lt;/a&gt;, which for me has come to include the use of programming languages such as &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt;. Complete control and knowledge is certainly not possible, at least not for me, but more control goes along with my goal of learning by doing. This website is a simple example of this approach. I was never going to be able to make this website by hand, but instead of using perfectly good ready-made solutions such as &lt;a href=&#34;https://www.squarespace.com&#34;&gt;Squarespace&lt;/a&gt; or even &lt;a href=&#34;https://wordpress.com&#34;&gt;Wordpress&lt;/a&gt;, I decided to make a static website using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;. Plug-and-play approaches may satisfy the visualization aspect of digital humanities, but they often do little to improve your skills, or at least they are not extendable in the same way that coding skills are. When faced with a decision about how do something for a digital humanities project, I often see an easy way and a more complex route. My approach has been to choose the more complex route. This way is often not overly difficult if you know what to do, but I usually do not have that knowledge, and so the process is slow and arduous. However, the goal is that in completing the task I learn a new set of skills or improve those I already had, making it possible for me to use them in future contexts.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Markdown is essentially a simpler way to write HTML. It is very approachable, but it still has the basic structure of all markup languages or code in the need to properly structure the markup. If something goes wrong, it is almost always because you mistyped something.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;I use a number of apps from the &lt;a href=&#34;https://www.omnigroup.com&#34;&gt;Omni Group&lt;/a&gt;, which began writing apps for &lt;a href=&#34;https://en.wikipedia.org/wiki/NeXT&#34;&gt;NeXT&lt;/a&gt;, and &lt;a href=&#34;http://www.barebones.com/products/bbedit/&#34;&gt;BBEdit&lt;/a&gt;, which has been actively developed for the Mac since 1992.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>New kinds of Projects: DH 2.0 and Coding</title>
      <link>/2017/08/16/new-kinds-of-projects-dh-2.0-and-coding/</link>
      <pubDate>Wed, 16 Aug 2017 15:36:25 -0700</pubDate>
      
      <guid>/2017/08/16/new-kinds-of-projects-dh-2.0-and-coding/</guid>
      <description>&lt;p&gt;In the process of learning about how I could use digital technologies to better organize my research, I quickly started to think about how I might extend these skills to produce new kinds of outputs.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; I was familiar with the concept of digital humanities, but the step from an internal process of organizing research and writing to production seemed both too nebulous and difficult. Digital humanities also seemed to concentrate on the visual. This was intriguing, but did not present itself as the most pressing need for a graduate student who was writing a dissertation on sibling relations among 16th-century merchants. It took years for me to move from what I am calling DH 1.0 to DH 2.0, to move from research methodology to making what could properly be termed digital humanities projects. This post presents an introduction to how I eventually took this step and why I decided to learn to code instead of other available solutions.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In reading tech websites and listening to tech podcasts I inevitably came into contact with the question of how to learn to program. A refrain that I heard over and over was that it was best to have a project in mind. Programming, I was told, is not an abstract entity, but something that one does to complete a set of specific tasks. In one sense this advice was encouraging. I had a possible digital humanities project in mind. I wanted to map a correspondence network of the letters found in the &lt;a href=&#34;https://www.erfgoedleiden.nl/collecties/archieven/archievenoverzicht/ead/index/zoekterm/meulen/eadid/0096&#34;&gt;archive of Daniel van der Meulen&lt;/a&gt;. The archive contains approximately 6,600 letters that Daniel received from 1578 to 1600. A chapter of my dissertation analyzes the collection, but the work was all done by hand in spreadsheets. When it came time to visualize the data, I was not able to find the time or energy to do more than make rather simplistic maps on a website and creating some graphs with Numbers. This sufficed for the purposes of the dissertation, but it did not bring me any closer to digital humanities. Alongside the issue of time, I simply did not know what a solution could look like with more sophisticated tools much less with code. Working with data in code seemed interesting and powerful, but I had difficulty moving beyond my naive ideas about coding and digital humanities where there appeared endless possibilities but concrete steps were mysterious and nebulous.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;At the &lt;a href=&#34;http://historians.org&#34;&gt;American Historical Associationâs&lt;/a&gt; annual meeting in Denver in January of this year I was inspired by a number panels on the use of digital humanities in History, especially by &lt;a href=&#34;http://www.colorado.edu/history/henry-lovejoy&#34;&gt;Henry Lovejoyâs&lt;/a&gt; &lt;a href=&#34;http://www.liberatedafricans.org&#34;&gt;Liberated Africans Project&lt;/a&gt; and &lt;a href=&#34;https://cla.auburn.edu/history/people/faculty/kate-craig/&#34;&gt;Kate Craigâs&lt;/a&gt; discussion of using digital humanities in the classroom.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; These panels motivated me to finally take the initiative to learn more about the tools of digital humanities and think about how I could create a project analyzing and visualizing the correspondence network of Daniel van der Meulen. I started by gathering together information on digital humanities in general. I found a plethora of sources such as &lt;a href=&#34;https://www.historians.org/teaching-and-learning/digital-history-resources&#34;&gt;AHAâs Digital History Resources&lt;/a&gt;, &lt;a href=&#34;http://dhresourcesforprojectbuilding.pbworks.com/w/page/69244243/FrontPage&#34;&gt;DH Toychest&lt;/a&gt;, &lt;a href=&#34;http://digitalhumanitiesnow.org&#34;&gt;Digital Humanities Now&lt;/a&gt;, and &lt;a href=&#34;http://programminghistorian.org&#34;&gt;The Programming Historian&lt;/a&gt;. Most helpful in the early going was reading through &lt;a href=&#34;https://www.scribd.com/document/345432425/Introduction-to-Digital-Humanities-Johanna-Drucker&#34;&gt;Johanna Druckerâs &lt;em&gt;Introduction to Digital Humanities Course Book: Concepts, Methods, and Tutorials for Students and Instructors&lt;/em&gt;&lt;/a&gt;. This book is based on the Digital Humanities 101 course at UCLA and covers topics from HTML to textual analysis. Most interesting for me were the sections on networks and GIS or Geographical Information Systems.&lt;/p&gt;

&lt;p&gt;My initial research gave me a starting point, but now I actually had to choose a path forward and decide on a tool or set of tools to create the project. I began by playing around with &lt;a href=&#34;https://public.tableau.com&#34;&gt;Tableau Public&lt;/a&gt; and &lt;a href=&#34;http://hdlab.stanford.edu/palladio/&#34;&gt;Palladio&lt;/a&gt;. Both provide more or less ready-made visualizations of spreadsheet data, the former as a desktop application and the latter as a web app. Both were interesting, but they lacked in terms of customization and did little to help me learn about producing visuals. I also tested out &lt;a href=&#34;https://gephi.org&#34;&gt;Gephi&lt;/a&gt;, an open-source application for the visualization of networks. I went through &lt;a href=&#34;http://www.martingrandjean.ch&#34;&gt;Martin Grandjeanâs&lt;/a&gt; very helpful &lt;a href=&#34;http://www.martingrandjean.ch/gephi-introduction/&#34;&gt;Introduction to Network Analysis and Visualization&lt;/a&gt;. However, because my project was aimed at producing a geographic representation of a network, I gravitated towards &lt;a href=&#34;http://gisgeography.com/mapping-out-gis-software-landscape/&#34;&gt;GIS tools&lt;/a&gt;. Initially, I was interested in &lt;a href=&#34;http://www.qgis.org&#34;&gt;QGIS&lt;/a&gt;, an open-source GIS application popular among geographers, but I also kept thinking of the possibility of doing something completely different and trying to do the project with code. Having no experience with programming or code, I remained hesitant, but a couple of resources showed me that what I wanted to do was possible through code.&lt;/p&gt;

&lt;p&gt;In getting a sense of digital humanities and digital history I came across the work of &lt;a href=&#34;http://lincolnmullen.com&#34;&gt;Lincoln Mullen&lt;/a&gt;, a historian at George Mason. Lincoln has authored a number of digital history projects using the &lt;a href=&#34;https://www.r-project.org&#34;&gt;programming language R&lt;/a&gt;. R was made by statisticians, but over the twenty years of its existence it has developed into a programming language fully capable of both data analysis and visualization. I read the Introduction to &lt;a href=&#34;http://dh-r.lincolnmullen.com&#34;&gt;Lincoln Mullenâs &lt;em&gt;Computational Historical Thinking: With Applications in R&lt;/em&gt;&lt;/a&gt;. The book is very much a work in progress, but the introduction was enough to convince me that I could accomplish my goals with R. Further exploring resources on R, I came across &lt;a href=&#34;http://www.springer.com/us/book/9783319207018&#34;&gt;Taylor Arnold and Lauren Tiltonâs &lt;em&gt;Humanities Data in R: Exploring Networks, Geospatial Data, Images, and Text&lt;/em&gt;&lt;/a&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; This book put all my reservations about learning to code and the possibilities of using R to rest. I was convinced that I needed to dive all the way in and learn R. I knew that it would not be the easiest way to produce a visualization of a correspondence network, but I also began to realize the actual potential of code.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;For more on how I got interested in digital technologies see the below post &lt;a href=&#34;https://jessesadler.com/post/thinking-about-workflow/&#34;&gt;Thinking about Workflow: DH 1.0&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;In this post I am using both coding and programming in a colloquial manner. By both terms I simply mean the creation of computer code to analyze and visualize data.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Taking a Digital Humanities course at UCLA was obviously an option, but, at least at the time, enrolling in a class never seemed particularly practical in the middle of writing my dissertation.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Both are former colleagues at UCLA.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;You may be able to download a free copy of &lt;em&gt;Humanities Data in R&lt;/em&gt; through your university.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>